"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AddProjectResponse = _interopRequireDefault(require("../model/AddProjectResponse"));
var _DeleteProjectResponse = _interopRequireDefault(require("../model/DeleteProjectResponse"));
var _GetActivitiesCollectionResponse = _interopRequireDefault(require("../model/GetActivitiesCollectionResponse"));
var _GetProjectBoardsResponse = _interopRequireDefault(require("../model/GetProjectBoardsResponse"));
var _GetProjectGroupsResponse = _interopRequireDefault(require("../model/GetProjectGroupsResponse"));
var _GetProjectPhasesResponse = _interopRequireDefault(require("../model/GetProjectPhasesResponse"));
var _GetProjectPlanResponse = _interopRequireDefault(require("../model/GetProjectPlanResponse"));
var _GetProjectResponse = _interopRequireDefault(require("../model/GetProjectResponse"));
var _GetProjectsResponse = _interopRequireDefault(require("../model/GetProjectsResponse"));
var _GetTasksResponse = _interopRequireDefault(require("../model/GetTasksResponse"));
var _ProjectPostObject = _interopRequireDefault(require("../model/ProjectPostObject"));
var _ProjectPutObject = _interopRequireDefault(require("../model/ProjectPutObject"));
var _ProjectPutPlanItemBodyObject = _interopRequireDefault(require("../model/ProjectPutPlanItemBodyObject"));
var _UpdateActivityPlanItemResponse = _interopRequireDefault(require("../model/UpdateActivityPlanItemResponse"));
var _UpdateProjectResponse = _interopRequireDefault(require("../model/UpdateProjectResponse"));
var _UpdateTaskPlanItemResponse = _interopRequireDefault(require("../model/UpdateTaskPlanItemResponse"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Projects service.
* @module api/ProjectsApi
* @version 1.0.0
*/
var ProjectsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ProjectsApi. 
  * @alias module:api/ProjectsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ProjectsApi(apiClient) {
    (0, _classCallCheck2["default"])(this, ProjectsApi);
    this.apiClient = apiClient;
  }

  /**
   * Add a project
   * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
   * @param {Object} opts Optional parameters
   * @param {module:model/ProjectPostObject} opts.projectPostObject 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddProjectResponse} and HTTP response
   */
  (0, _createClass2["default"])(ProjectsApi, [{
    key: "addProjectWithHttpInfo",
    value: function addProjectWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['projectPostObject'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _AddProjectResponse["default"];
      return this.apiClient.callApi('/projects', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Add a project
     * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPostObject} opts.projectPostObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddProjectResponse}
     */
  }, {
    key: "addProject",
    value: function addProject(opts) {
      return this.addProjectWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Archive a project
     * Archives a project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateProjectResponse} and HTTP response
     */
  }, {
    key: "archiveProjectWithHttpInfo",
    value: function archiveProjectWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archiveProject");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _UpdateProjectResponse["default"];
      return this.apiClient.callApi('/projects/{id}/archive', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Archive a project
     * Archives a project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateProjectResponse}
     */
  }, {
    key: "archiveProject",
    value: function archiveProject(id) {
      return this.archiveProjectWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Delete a project
     * Marks a project as deleted.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteProjectResponse} and HTTP response
     */
  }, {
    key: "deleteProjectWithHttpInfo",
    value: function deleteProjectWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProject");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _DeleteProjectResponse["default"];
      return this.apiClient.callApi('/projects/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete a project
     * Marks a project as deleted.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteProjectResponse}
     */
  }, {
    key: "deleteProject",
    value: function deleteProject(id) {
      return this.deleteProjectWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Get details of a project
     * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectResponse} and HTTP response
     */
  }, {
    key: "getProjectWithHttpInfo",
    value: function getProjectWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProject");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetProjectResponse["default"];
      return this.apiClient.callApi('/projects/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get details of a project
     * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectResponse}
     */
  }, {
    key: "getProject",
    value: function getProject(id) {
      return this.getProjectWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Returns project activities
     * Returns activities linked to a specific project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetActivitiesCollectionResponse} and HTTP response
     */
  }, {
    key: "getProjectActivitiesWithHttpInfo",
    value: function getProjectActivitiesWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectActivities");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetActivitiesCollectionResponse["default"];
      return this.apiClient.callApi('/projects/{id}/activities', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Returns project activities
     * Returns activities linked to a specific project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetActivitiesCollectionResponse}
     */
  }, {
    key: "getProjectActivities",
    value: function getProjectActivities(id) {
      return this.getProjectActivitiesWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Returns project groups
     * Returns all active groups under a specific project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectGroupsResponse} and HTTP response
     */
  }, {
    key: "getProjectGroupsWithHttpInfo",
    value: function getProjectGroupsWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectGroups");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetProjectGroupsResponse["default"];
      return this.apiClient.callApi('/projects/{id}/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Returns project groups
     * Returns all active groups under a specific project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectGroupsResponse}
     */
  }, {
    key: "getProjectGroups",
    value: function getProjectGroups(id) {
      return this.getProjectGroupsWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Returns project plan
     * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectPlanResponse} and HTTP response
     */
  }, {
    key: "getProjectPlanWithHttpInfo",
    value: function getProjectPlanWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectPlan");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetProjectPlanResponse["default"];
      return this.apiClient.callApi('/projects/{id}/plan', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Returns project plan
     * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectPlanResponse}
     */
  }, {
    key: "getProjectPlan",
    value: function getProjectPlan(id) {
      return this.getProjectPlanWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Returns project tasks
     * Returns tasks linked to a specific project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTasksResponse} and HTTP response
     */
  }, {
    key: "getProjectTasksWithHttpInfo",
    value: function getProjectTasksWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectTasks");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetTasksResponse["default"];
      return this.apiClient.callApi('/projects/{id}/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Returns project tasks
     * Returns tasks linked to a specific project.
     * @param {Number} id The ID of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTasksResponse}
     */
  }, {
    key: "getProjectTasks",
    value: function getProjectTasks(id) {
      return this.getProjectTasksWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Get all projects
     * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {Number} opts.limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
     * @param {Number} opts.filterId The ID of the filter to use
     * @param {String} opts.status If supplied, includes only projects with the specified statuses. Possible values are `open`, `completed`, `canceled` and `deleted`. By default `deleted` projects are not returned.
     * @param {Number} opts.phaseId If supplied, only projects in specified phase are returned
     * @param {Boolean} opts.includeArchived If supplied with `true` then archived projects are also included in the response. By default only not archived projects are returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectsResponse} and HTTP response
     */
  }, {
    key: "getProjectsWithHttpInfo",
    value: function getProjectsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'cursor': opts['cursor'] === undefined ? opts['cursor'] : opts['cursor'],
        'limit': opts['limit'] === undefined ? opts['limit'] : opts['limit'],
        'filter_id': opts['filter_id'] === undefined ? opts['filterId'] : opts['filter_id'],
        'status': opts['status'] === undefined ? opts['status'] : opts['status'],
        'phase_id': opts['phase_id'] === undefined ? opts['phaseId'] : opts['phase_id'],
        'include_archived': opts['include_archived'] === undefined ? opts['includeArchived'] : opts['include_archived']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetProjectsResponse["default"];
      return this.apiClient.callApi('/projects', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get all projects
     * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor For pagination, the marker (an opaque string value) representing the first item on the next page
     * @param {Number} opts.limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
     * @param {Number} opts.filterId The ID of the filter to use
     * @param {String} opts.status If supplied, includes only projects with the specified statuses. Possible values are `open`, `completed`, `canceled` and `deleted`. By default `deleted` projects are not returned.
     * @param {Number} opts.phaseId If supplied, only projects in specified phase are returned
     * @param {Boolean} opts.includeArchived If supplied with `true` then archived projects are also included in the response. By default only not archived projects are returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectsResponse}
     */
  }, {
    key: "getProjects",
    value: function getProjects(opts) {
      return this.getProjectsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Get all project boards
     * Returns all projects boards that are not deleted.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectBoardsResponse} and HTTP response
     */
  }, {
    key: "getProjectsBoardsWithHttpInfo",
    value: function getProjectsBoardsWithHttpInfo() {
      var opts = {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetProjectBoardsResponse["default"];
      return this.apiClient.callApi('/projects/boards', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get all project boards
     * Returns all projects boards that are not deleted.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectBoardsResponse}
     */
  }, {
    key: "getProjectsBoards",
    value: function getProjectsBoards() {
      return this.getProjectsBoardsWithHttpInfo().then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Get project phases
     * Returns all active project phases under a specific board.
     * @param {Number} boardId ID of the board for which phases are requested
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProjectPhasesResponse} and HTTP response
     */
  }, {
    key: "getProjectsPhasesWithHttpInfo",
    value: function getProjectsPhasesWithHttpInfo(boardId) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getProjectsPhases");
      }
      var pathParams = {};
      var queryParams = {
        'board_id': boardId
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetProjectPhasesResponse["default"];
      return this.apiClient.callApi('/projects/phases', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get project phases
     * Returns all active project phases under a specific board.
     * @param {Number} boardId ID of the board for which phases are requested
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProjectPhasesResponse}
     */
  }, {
    key: "getProjectsPhases",
    value: function getProjectsPhases(boardId) {
      return this.getProjectsPhasesWithHttpInfo(boardId).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Update activity in project plan
     * Updates an activity phase or group in a project.
     * @param {Number} id The ID of the project
     * @param {Number} activityId The ID of the activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPutPlanItemBodyObject} opts.projectPutPlanItemBodyObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateActivityPlanItemResponse} and HTTP response
     */
  }, {
    key: "putProjectPlanActivityWithHttpInfo",
    value: function putProjectPlanActivityWithHttpInfo(id, activityId, opts) {
      opts = opts || {};
      var postBody = opts['projectPutPlanItemBodyObject'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProjectPlanActivity");
      }

      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling putProjectPlanActivity");
      }
      var pathParams = {
        'id': id,
        'activityId': activityId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _UpdateActivityPlanItemResponse["default"];
      return this.apiClient.callApi('/projects/{id}/plan/activities/{activityId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update activity in project plan
     * Updates an activity phase or group in a project.
     * @param {Number} id The ID of the project
     * @param {Number} activityId The ID of the activity
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPutPlanItemBodyObject} opts.projectPutPlanItemBodyObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateActivityPlanItemResponse}
     */
  }, {
    key: "putProjectPlanActivity",
    value: function putProjectPlanActivity(id, activityId, opts) {
      return this.putProjectPlanActivityWithHttpInfo(id, activityId, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Update task in project plan
     * Updates a task phase or group in a project.
     * @param {Number} id The ID of the project
     * @param {Number} taskId The ID of the task
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPutPlanItemBodyObject} opts.projectPutPlanItemBodyObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTaskPlanItemResponse} and HTTP response
     */
  }, {
    key: "putProjectPlanTaskWithHttpInfo",
    value: function putProjectPlanTaskWithHttpInfo(id, taskId, opts) {
      opts = opts || {};
      var postBody = opts['projectPutPlanItemBodyObject'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProjectPlanTask");
      }

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling putProjectPlanTask");
      }
      var pathParams = {
        'id': id,
        'taskId': taskId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _UpdateTaskPlanItemResponse["default"];
      return this.apiClient.callApi('/projects/{id}/plan/tasks/{taskId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update task in project plan
     * Updates a task phase or group in a project.
     * @param {Number} id The ID of the project
     * @param {Number} taskId The ID of the task
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPutPlanItemBodyObject} opts.projectPutPlanItemBodyObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTaskPlanItemResponse}
     */
  }, {
    key: "putProjectPlanTask",
    value: function putProjectPlanTask(id, taskId, opts) {
      return this.putProjectPlanTaskWithHttpInfo(id, taskId, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Update a project
     * Updates a project.
     * @param {Number} id The ID of the project
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPutObject} opts.projectPutObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateProjectResponse} and HTTP response
     */
  }, {
    key: "updateProjectWithHttpInfo",
    value: function updateProjectWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = opts['projectPutObject'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProject");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _UpdateProjectResponse["default"];
      return this.apiClient.callApi('/projects/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update a project
     * Updates a project.
     * @param {Number} id The ID of the project
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPutObject} opts.projectPutObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateProjectResponse}
     */
  }, {
    key: "updateProject",
    value: function updateProject(id, opts) {
      return this.updateProjectWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
  }]);
  return ProjectsApi;
}();
exports["default"] = ProjectsApi;