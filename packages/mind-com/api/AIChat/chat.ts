/**
 * AI Chat API Endpoint
 *
 * Handles AI chat interactions using Anthropic Claude models.
 * Processes user messages, applies system prompts, and streams responses.
 * Supports multiple chat modes with automatic language detection.
 *
 * Features:
 * - AI-powered conversation handling
 * - Automatic language detection from user questions
 * - System prompt injection with business context
 * - Message history processing
 * - Streaming responses
 * - Multiple chat modes (basic, followup)
 * - Semantic search integration via tools
 */

import { anthropic } from "@ai-sdk/anthropic"
import { streamText } from "ai"
import { prompts } from "../../docs/.vitepress/config/AIConfig.js"
import { semanticSearchTool } from "./semanticSearch.js"

interface ChatMessage {
  role: "user" | "assistant" | "system"
  content: string
}

interface ChatRequest {
  messages: ChatMessage[]
  mode?: "basic" | "followup"
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞
 */
export async function POST(request: Request): Promise<Response> {
  try {
    const body = (await request.json()) as ChatRequest
    let messages = body.messages || []
    const { mode } = body

    console.log(`üîµ API: –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–∂–∏–º: ${mode}`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    const result = streamText({
      model: anthropic(prompts[mode].model),
      messages: messages,
      system: prompts[mode].prompt,
      maxTokens: prompts[mode].maxTokens,
      temperature: prompts[mode].temperature,
      presencePenalty: prompts[mode].presencePenalty,
      frequencyPenalty: prompts[mode].frequencyPenalty,
      tools: {
        searchKnowledgeBase: semanticSearchTool,
      },
      toolChoice: "auto", // –ü–æ–∑–≤–æ–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Ä–µ—à–∞—Ç—å, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
      maxSteps: 5, // –ü–æ–∑–≤–æ–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    })

    console.log("üîµ API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥...")

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç streamText
    return result.toDataStreamResponse()
  } catch (error) {
    console.error("üî¥ API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error)

    return new Response(JSON.stringify({ error: String(error) }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    })
  }
}
