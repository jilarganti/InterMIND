/**
 * AI Chat API Endpoint
 *
 * Handles AI chat interactions using Anthropic Claude models.
 * Processes user messages, applies system prompts, and streams responses.
 * Supports multiple chat modes and languages with content filtering.
 *
 * Features:
 * - AI-powered conversation handling
 * - Multiple language support
 * - System prompt injection with business context
 * - Message history processing
 * - Content filtering (figure tags removal)
 * - Streaming responses
 * - Multiple chat modes (basic, followup)
 * - Development/production environment handling
 */

import { anthropic } from "@ai-sdk/anthropic"
import { openai } from "@ai-sdk/openai"
import { streamText } from "ai"
import { prompts } from "../../docs/.vitepress/config/AIConfig.js"
import * as fs from "fs"
import fetch from "node-fetch"

interface ChatMessage {
  role: "user" | "assistant" | "system"
  content: string
}

interface ChatRequest {
  messages: ChatMessage[]
  mode?: "basic" | "followup"
  language?: string
}

let llmsTxt: string

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞
 */
export async function POST(request: Request): Promise<Response> {
  console.log("üîµ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /api/chat")

  try {
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    llmsTxt = await getContent("docs/.vitepress/dist/llms.txt", "llmsTxt")
    llmsTxt = llmsTxt.replace(/\.md/g, "")

    const body = (await request.json()) as ChatRequest
    let messages = body.messages || []
    const { mode, language } = body

    console.log(`üîµ API: –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–∂–∏–º: ${mode}, —è–∑—ã–∫: ${language}`)

    /**
     * –ö–æ—Å—Ç—ã–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–≥–æ–≤ figure.
     * –í –Ω–æ—Ä–º–µ —Ç–µ–≥–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.
     */
    const cleanedMessages = messages.map((msg) => {
      if (msg.role === "assistant") {
        return {
          ...msg,
          content: removeFigureTags(msg.content),
        }
      }
      return msg
    })

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = cleanedMessages

    // –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let systemPromptConfig = mode === "followup" ? prompts.followup : prompts.basic

    console.log("üîµ API: –†–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞: " + mode)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let systemPrompt = systemPromptConfig.name

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    systemPrompt = `${llmsTxt} \n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ: ${language}. \n` + systemPrompt

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
    const promptLength = systemPrompt.length
    console.log(`üîç –†–∞–∑–º–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: ${promptLength} —Å–∏–º–≤–æ–ª–æ–≤`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    const result = streamText({
      model: anthropic(systemPromptConfig.model), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      system: systemPrompt,
      messages,
      maxTokens: systemPromptConfig.maxTokens,
      temperature: systemPromptConfig.temperature,
      presencePenalty: systemPromptConfig.presencePenalty,
      frequencyPenalty: systemPromptConfig.frequencyPenalty,
    })

    console.log("üîµ API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥...")

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç streamText
    return result.toDataStreamResponse()
  } catch (error) {
    console.error("üî¥ API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error)

    return new Response(JSON.stringify({ error: String(error) }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    })
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param tag - —Ç–µ–≥ –¥–ª—è –æ–±–µ—Ä—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @returns —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å —Ç–µ–≥–æ–º
 */
async function getContent(filePath: string, tag: string): Promise<string> {
  let content: string

  // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (vercel dev) —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  const isLocalDev = process.env.VERCEL_URL?.includes("localhost")

  if (isLocalDev) {
    content = fs.readFileSync(filePath, "utf8")
  } else {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è production/preview
    const baseUrl = "https://" + (process.env.VERCEL_URL || process.env.VERCEL_BRANCH_URL)
    // –ù–∞—Ö–æ–¥–∏–º –≤ –ø—É—Ç–∏ "/dist/" –∏ –æ—Ç—Å–µ–∫–∞–µ–º –≤—Å—ë –¥–æ –∏ –≤–∫–ª—é—á–∞—è
    let urlPath = filePath
    const distIndex = filePath.indexOf("/dist/")

    if (distIndex !== -1) {
      urlPath = filePath.substring(distIndex + 6) // +6 —á—Ç–æ–±—ã –æ—Ç—Å–µ—á—å –∏ —Å–∞–º "/dist/"
    }

    const fullUrl = `${baseUrl}/${urlPath}`
    console.log("üîµ API: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ URL:", fullUrl)
    const response = await fetch(fullUrl, {
      headers: {
        "x-vercel-protection-bypass": process.env.VERCEL_AUTOMATION_BYPASS_SECRET || "",
      },
    })

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ${fullUrl}`)
    }

    content = await response.text()
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ–≥–æ–º
  return `<${tag}>\n${content}\n</${tag}>`
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ figure –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
function removeFigureTags(content: string): string {
  if (typeof content !== "string") return content

  // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <figure> –∏ </figure> –∏ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–∂–¥—É –Ω–∏–º–∏
  return content.replace(/<figure\b[^>]*>[\s\S]*?<\/figure>/gi, "")
}
