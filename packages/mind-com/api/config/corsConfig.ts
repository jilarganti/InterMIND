// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è API endpoints
export const ALLOWED_DOMAINS = ["localhost", "mind.com", "inter.mind.com", "status.mind.com", "i14n.com"]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
export function isAllowedDomain(request: Request): boolean {
  const origin = request.headers.get("origin")
  const referer = request.headers.get("referer")

  // –ï—Å–ª–∏ –Ω–µ—Ç origin –∏ referer, —Ä–∞–∑—Ä–µ—à–∞–µ–º (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
  if (!origin && !referer) {
    return true
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º origin
  if (origin) {
    try {
      const originUrl = new URL(origin)
      const hostname = originUrl.hostname

      if (ALLOWED_DOMAINS.includes(hostname)) {
        return true
      } else {
        console.warn(`üö´ Access denied from unauthorized domain: ${hostname} (origin)`)
      }
    } catch (e) {
      console.warn("Invalid origin URL:", origin)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º referer –∫–∞–∫ fallback
  if (referer) {
    try {
      const refererUrl = new URL(referer)
      const hostname = refererUrl.hostname

      if (ALLOWED_DOMAINS.includes(hostname)) {
        return true
      } else {
        console.warn(`üö´ Access denied from unauthorized domain: ${hostname} (referer)`)
      }
    } catch (e) {
      console.warn("Invalid referer URL:", referer)
    }
  }

  return false
}
