/**
 * Semantic Search Tool —Å Upstash Vector
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Upstash Vector –∏ OpenAI –Ω–∞–ø—Ä—è–º—É—é
 */

import { tool } from "ai"
import { z } from "zod"
import { Index } from "@upstash/vector"
import { Pinecone } from "@pinecone-database/pinecone"
import OpenAI from "openai"

// –í—ã–±–æ—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "pinecone"
const USE_VECTOR_DB = "upstash" as "upstash" | "pinecone"

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENAI_API_KEY!")
}

if (USE_VECTOR_DB === "upstash" && (!process.env.UPSTASH_VECTOR_REST_URL || !process.env.UPSTASH_VECTOR_REST_TOKEN)) {
  console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –¥–ª—è Upstash!")
}

if (USE_VECTOR_DB === "pinecone" && (!process.env.PINECONE_API_KEY || !process.env.PINECONE_INDEX_NAME)) {
  console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –¥–ª—è Pinecone!")
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Upstash Vector (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
const upstashIndex =
  USE_VECTOR_DB === "upstash"
    ? new Index({
        url: process.env.UPSTASH_VECTOR_REST_URL!,
        token: process.env.UPSTASH_VECTOR_REST_TOKEN!,
      })
    : null

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
const pinecone =
  USE_VECTOR_DB === "pinecone"
    ? new Pinecone({
        apiKey: process.env.PINECONE_API_KEY!,
      })
    : null

const pineconeIndex = pinecone ? pinecone.index(process.env.PINECONE_INDEX_NAME!) : null

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è Upstash Vector (384 –∏–∑–º–µ—Ä–µ–Ω–∏—è)
async function createUpstashEmbedding(text: string): Promise<number[]> {
  const response = await openai.embeddings.create({
    model: "text-embedding-3-small",
    input: text,
    dimensions: 384, // Upstash —Ç—Ä–µ–±—É–µ—Ç 384 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
  })
  return response.data[0].embedding
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è Pinecone (1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π)
async function createPineconeEmbedding(text: string): Promise<number[]> {
  const response = await openai.embeddings.create({
    model: "text-embedding-3-small",
    input: text,
    dimensions: 1536, // Pinecone –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1536 –∏–∑–º–µ—Ä–µ–Ω–∏–π
  })
  return response.data[0].embedding
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —á–∞–Ω–∫–∞
function extractHeadingFromChunk(text: string): string {
  const lines = text.split("\n")

  for (const line of lines) {
    // –ò—â–µ–º H1 –∏–ª–∏ H2 –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const headingMatch = line.match(/^#{1,2}\s+(.+)$/)
    if (headingMatch) {
      return headingMatch[1].trim()
    }
  }

  // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–µ–∫—Å—Ç–∞
  const words = text
    .replace(/[#*`\[\]()]/g, "")
    .trim()
    .split(/\s+/)
  return words.slice(0, 4).join(" ") + (words.length > 4 ? "..." : "")
}

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
export const semanticSearchTool = tool({
  description: "Search for information in the InterMIND knowledge base about features, capabilities, pricing, and other documentation",
  parameters: z.object({
    query: z.string().describe("The search query to find relevant information"),
    limit: z.number().optional().default(5).describe("Maximum number of results to return"),
  }),
  execute: async ({ query, limit = 5 }) => {
    try {
      console.log(`üîç Searching for: "${query}" using ${USE_VECTOR_DB}`)

      let searchResponse: any[]

      if (USE_VECTOR_DB === "upstash") {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Upstash Vector
        const queryEmbedding = await createUpstashEmbedding(query)
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Upstash Vector...`)

        if (!upstashIndex) {
          throw new Error("Upstash index –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }

        searchResponse = await upstashIndex.query({
          vector: queryEmbedding,
          topK: limit,
          includeMetadata: true,
        })

        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${searchResponse.length || 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Upstash`)
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Pinecone
        const queryEmbedding = await createPineconeEmbedding(query)
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Pinecone...`)

        if (!pineconeIndex) {
          throw new Error("Pinecone index –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }

        const pineconeResponse = await pineconeIndex.query({
          vector: queryEmbedding,
          topK: limit,
          includeMetadata: true,
        })

        searchResponse = pineconeResponse.matches || []
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${searchResponse.length || 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Pinecone`)
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –æ–±–µ–∏—Ö –ë–î
      const relevantResults = searchResponse.map((result) => {
        const metadata = result.metadata || {}

        return {
          content: metadata.text || "",
          url: metadata.url || "",
          score: result.score || 0,
        }
      })

      console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${relevantResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)

      if (relevantResults.length === 0) {
        console.log(`‚ö†Ô∏è ${USE_VECTOR_DB} –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)
        return "No relevant information found for your query. The search did not return any results with sufficient relevance."
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const formattedResults = relevantResults
        .map((result, index) => {
          const headingTitle = extractHeadingFromChunk(String(result.content))
          const sourceText = `[${headingTitle}](${result.url})\nRelevance: ${(result.score * 100).toFixed(0)}%`
          return `[${index + 1}] ${result.content}\n${sourceText}`
        })
        .join("\n\n---\n\n")

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è AI
      console.log(`üí¨ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${relevantResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI`)
      console.log(`üí¨ ${formattedResults}`)
      return `Found ${relevantResults.length} relevant results from InterMIND documentation:\n\n${formattedResults}`
    } catch (error) {
      console.error("Search error:", error)
      const errorMessage = error instanceof Error ? error.message : "Unknown error"
      return `Failed to search the knowledge base: ${errorMessage}`
    }
  },
})
