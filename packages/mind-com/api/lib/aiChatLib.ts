/**
 * Semantic Search Tool –±–µ–∑ LangChain
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pinecone –∏ OpenAI –Ω–∞–ø—Ä—è–º—É—é
 */

import { tool } from "ai"
import { z } from "zod"
import { Pinecone } from "@pinecone-database/pinecone"
import OpenAI from "openai"

if (!process.env.PINECONE_API_KEY || !process.env.OPENAI_API_KEY) console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏!")

const pinecone = new Pinecone({
  apiKey: process.env.PINECONE_API_KEY,
})

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å
const index = pinecone.index(process.env.PINECONE_INDEX_NAME)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
async function createEmbedding(text: string): Promise<number[]> {
  const response = await openai.embeddings.create({
    model: "text-embedding-3-small",
    input: text,
  })
  return response.data[0].embedding
}

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
export const semanticSearchTool = tool({
  description: "Search for information in the InterMIND knowledge base about features, capabilities, pricing, and other documentation",
  parameters: z.object({
    query: z.string().describe("The search query to find relevant information"),
    limit: z.number().optional().default(5).describe("Maximum number of results to return"),
  }),
  execute: async ({ query, limit = 5 }) => {
    try {
      console.log(`üîç Searching for: "${query}"`)

      // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const queryEmbedding = await createEmbedding(query)

      // –ò—â–µ–º –≤ Pinecone
      console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Pinecone...`)
      const searchResponse = await index.query({
        vector: queryEmbedding,
        topK: limit,
        includeMetadata: true,
      })

      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${searchResponse.matches?.length || 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Pinecone`)

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const relevantResults =
        searchResponse.matches
          ?.filter((match) => (match.score || 0) > 0.4)
          .map((match) => ({
            content: match.metadata?.text || "",
            source: match.metadata?.source || "InterMIND Documentation",
            score: match.score || 0,
          })) || []

      console.log(`‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (>40%): ${relevantResults.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)

      if (relevantResults.length === 0) {
        console.log("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é –≤—ã—à–µ 40%")
        return "No relevant information found for your query. The search did not return any results with sufficient relevance."
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const formattedResults = relevantResults
        .map((result, index) => `[${index + 1}] ${result.content}\n(Source: ${result.source}, Relevance: ${(result.score * 100).toFixed(0)}%)`)
        .join("\n\n---\n\n")

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è AI
      console.log(`üí¨ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${relevantResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI`)
      return `Found ${relevantResults.length} relevant results from InterMIND documentation:\n\n${formattedResults}`
    } catch (error) {
      console.error("Search error:", error)
      const errorMessage = error instanceof Error ? error.message : "Unknown error"
      return `Failed to search the knowledge base: ${errorMessage}`
    }
  },
})
