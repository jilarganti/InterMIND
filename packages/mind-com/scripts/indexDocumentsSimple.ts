/**
 * –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ LangChain
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pinecone –∏ OpenAI –Ω–∞–ø—Ä—è–º—É—é
 */

import { promises as fs } from "fs"
// import path from "path"
import { Pinecone } from "@pinecone-database/pinecone"
import OpenAI from "openai"
// import dotenv from "dotenv"

// import * as fs from "fs"
import * as path from "path"
import * as dotenv from "dotenv"

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(process.cwd(), ".env") })
dotenv.config({ path: path.resolve(process.cwd(), ".vercel/.env.development.local") })

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.PINECONE_API_KEY || !process.env.OPENAI_API_KEY) {
  console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
  console.error("PINECONE_API_KEY:", process.env.PINECONE_API_KEY ? "‚úÖ" : "‚ùå")
  console.error("OPENAI_API_KEY:", process.env.OPENAI_API_KEY ? "‚úÖ" : "‚ùå")
  process.exit(1)
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const pinecone = new Pinecone({
  apiKey: process.env.PINECONE_API_KEY,
})

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

const INDEX_NAME = "intermind-docs"

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏
function splitText(text: string, chunkSize: number = 1000, overlap: number = 200): string[] {
  const chunks: string[] = []
  let start = 0

  while (start < text.length) {
    const end = Math.min(start + chunkSize, text.length)
    chunks.push(text.slice(start, end))
    start = end - overlap

    // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    if (start >= text.length - overlap) break
  }

  return chunks
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
async function createEmbeddings(texts: string[]): Promise<number[][]> {
  const response = await openai.embeddings.create({
    model: "text-embedding-3-small",
    input: texts,
  })
  return response.data.map((item) => item.embedding)
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
async function indexDocuments() {
  console.log("üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n")

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.PINECONE_API_KEY || !process.env.OPENAI_API_KEY) {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    process.exit(1)
  }

  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
  const docPath = path.resolve(process.cwd(), "./docs/.vitepress/dist/llms-full.txt")
  console.log(`üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${docPath}`)

  const content = await fs.readFile(docPath, "utf-8")
  console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(content.length / 1024).toFixed(1)} KB\n`)

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
  const chunks = splitText(content)
  console.log(`üî™ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞–Ω–∫–æ–≤\n`)

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å
  const index = pinecone.index(INDEX_NAME)

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –±–∞—Ç—á–∞–º–∏
  const batchSize = 10
  let processed = 0

  for (let i = 0; i < chunks.length; i += batchSize) {
    const batch = chunks.slice(i, i + batchSize)

    // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –±–∞—Ç—á–∞
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ ${i + 1}-${Math.min(i + batchSize, chunks.length)}...`)
    const embeddings = await createEmbeddings(batch)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Pinecone
    const vectors = batch.map((text, idx) => ({
      id: `doc-chunk-${i + idx}`,
      values: embeddings[idx],
      metadata: {
        text: text.substring(0, 2000), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        source: "InterMIND Documentation",
        chunkIndex: i + idx,
      },
    }))

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Pinecone
    await index.upsert(vectors)
    processed += batch.length

    console.log(`‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: ${processed}/${chunks.length}`)
  }

  console.log("\nüéâ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = await index.describeIndexStats()
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞:`)
  console.log(`   - –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: ${stats.totalRecordCount}`)
  console.log(`   - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${stats.dimension}`)
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
indexDocuments().catch(console.error)
