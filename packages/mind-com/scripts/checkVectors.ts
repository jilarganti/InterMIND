/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
 */
import { Pinecone } from "@pinecone-database/pinecone"
import * as dotenv from "dotenv"

// Load environment variables
dotenv.config({ path: [".vercel/.env.development.local", ".env.local"] })

const pinecone = new Pinecone({
  apiKey: process.env.PINECONE_API_KEY,
})

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å
const index = pinecone.index(process.env.PINECONE_INDEX_NAME)

async function checkVectors() {
  try {
    console.log("üîç –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞...")
    
    const stats = await index.describeIndexStats()
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: ${stats.totalRecordCount}`)
    console.log(`üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${stats.dimension}`)
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–æ–≤...")
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    const queryResult = await index.query({
      vector: new Array(stats.dimension).fill(0.1),
      topK: 3,
      includeMetadata: true,
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: ${queryResult.matches.length}`)
    
    queryResult.matches.forEach((match, index) => {
      console.log(`\n[${index + 1}] Vector ID: ${match.id}`)
      console.log(`Title: ${match.metadata?.title || 'N/A'}`)
      console.log(`URL: ${match.metadata?.url || 'N/A'}`)
      console.log(`Has images: ${match.metadata?.has_images || false}`)
      console.log(`Image count: ${match.metadata?.image_count || 0}`)
      
      if (match.metadata?.images) {
        console.log(`Images data: ${match.metadata.images}`)
      }
    })
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error)
  }
}

checkVectors()
