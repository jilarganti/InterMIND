import Anthropic from "@anthropic-ai/sdk"
import OpenAI from "openai"
import * as fs from "fs"
import * as path from "path"
import * as dotenv from "dotenv"
import { config } from "./config.js"
import { getPromptForTranslation } from "./prompt.js"

dotenv.config()

// let hasOpenAI = process.env.OPENAI_API_KEY
// let hasAnthropic = process.env.ANTHROPIC_API_KEY
// let hasXAI = process.env.XAI_API_KEY

// if (!hasOpenAI && !hasAnthropic && !hasXAI) {
//   console.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª –¥–ª—è LLM –º–æ–¥–µ–ª–µ–π")
//   process.exit(1)
// }

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY })
const xai = new OpenAI({ apiKey: process.env.XAI_API_KEY, baseURL: "https://api.x.ai/v1" })

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
function getNextModel(currentModel) {
  const modelEntries = Object.entries(config.models)
  const currentIndex = modelEntries.findIndex(([key]) => key === currentModel)

  if (currentIndex === -1 || currentIndex === modelEntries.length - 1) {
    return null
  }

  return modelEntries[currentIndex + 1][0]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–º–µ–Ω –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
function applyContentReplacements(content, langCode) {
  let modifiedContent = content

  // –ó–∞–º–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
  modifiedContent = modifiedContent.replace(/export const en =/, `export const ${langCode} =`)

  // –ó–∞–º–µ–Ω–∞ BASE_PATH
  modifiedContent = modifiedContent.replace(/BASE_PATH = ""/, `BASE_PATH = "/${langCode}"`)

  return modifiedContent
}

async function translateWithOpenAI(content, targetLang, langCode) {
  const completion = await openai.chat.completions.create({
    model: config.models.gpt4.name,
    temperature: 0,
    messages: [{ role: "user", content: getPromptForTranslation(content, targetLang, langCode) }],
  })

  const result = completion.choices[0].message.content
  const match = result.match(/<translated_markdown>([\s\S]*)<\/translated_markdown>/)
  return match ? match[1].trim() : result
}

async function translateWithClaude(content, targetLang, langCode) {
  const message = await anthropic.messages.create({
    model: config.models.claude.name,
    max_tokens: 4096,
    temperature: 0,
    messages: [{ role: "user", content: getPromptForTranslation(content, targetLang, langCode) }],
  })

  const result = message.content[0].text
  const match = result.match(/<translated_markdown>([\s\S]*)<\/translated_markdown>/)
  return match ? match[1].trim() : result
}

async function translateWithGrok(content, targetLang, langCode) {
  const completion = await xai.chat.completions.create({
    model: config.models.grok.name,
    temperature: 0,
    messages: [{ role: "user", content: getPromptForTranslation(content, targetLang, langCode) }],
  })

  const result = completion.choices[0].message.content
  const match = result.match(/<translated_markdown>([\s\S]*)<\/translated_markdown>/)
  return match ? match[1].trim() : result
}

async function translateWithModel(model, content, targetLang, langCode) {
  let translatedContent
  switch (model) {
    case "gpt4":
      translatedContent = await translateWithOpenAI(content, targetLang, langCode)
      break
    case "claude":
      translatedContent = await translateWithClaude(content, targetLang, langCode)
      break
    case "grok":
      translatedContent = await translateWithGrok(content, targetLang, langCode)
      break
    default:
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: ${model}`)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
  // if (/\[[^[\]]+(\.\.\.|[?])\]/.test(translatedContent)) {
  //   throw new Error("–ù–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
  // }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
  if (/\[[^<][^[\]]*?(\.\.\.|[?])\]\s*$/.test(translatedContent)) {
    throw new Error("–ù–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
  }

  return translatedContent.trim()
}

async function translateMarkdown(content, currentModel, targetLang, langCode) {
  try {
    if (!content.trim()) return content

    const translatedContent = await translateWithModel(currentModel, content, targetLang, langCode)
    return translatedContent
  } catch (error) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
    const nextModel = getNextModel(currentModel)

    if (nextModel) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –º–æ–¥–µ–ª—å—é ${currentModel}: ${error.message}`)
      console.log(`‚Ü™Ô∏è –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å ${nextModel}...`)
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
      return await translateMarkdown(content, nextModel, targetLang, langCode)
    }

    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    console.error(`‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`)
    throw error
  }
}

function splitByH2(content) {
  const parts = content.split("\n## ")
  return parts.map((part, i) => (i === 0 ? part.trim() : "## " + part.trim())).filter(Boolean)
}

async function getAllMarkdownFiles(dir) {
  const files = []
  const items = fs.readdirSync(dir)

  for (const item of items) {
    const fullPath = path.join(dir, item)

    if (config.exclude?.some((excluded) => fullPath.includes(excluded))) {
      continue
    }

    const stat = fs.statSync(fullPath)

    if (stat.isDirectory()) {
      files.push(...(await getAllMarkdownFiles(fullPath)))
    } else if (item.endsWith(".md")) {
      files.push(fullPath)
    }
  }

  return files
}

async function needsTranslation(sourceFile, targetFile) {
  if (!fs.existsSync(targetFile)) {
    console.log(`üëª –§–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${targetFile}`)
    return true
  }

  const sourceStats = fs.statSync(sourceFile)
  const targetStats = fs.statSync(targetFile)

  // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
  const sourceTime = Math.floor(sourceStats.mtimeMs / 1000)
  const targetTime = Math.floor(targetStats.mtimeMs / 1000)

  const needsUpdate = sourceTime > targetTime

  if (needsUpdate) {
    // console.log(`\nüîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥:`)
    // console.log(`Source: ${sourceFile}`)
    // console.log(`- Modified: ${sourceStats.mtime.toLocaleString()}`)
    // console.log(`Target: ${targetFile}`)
    // console.log(`- Modified: ${targetStats.mtime.toLocaleString()}\n`)
  }

  return needsUpdate
}

async function syncFileStructure() {
  console.log("üîç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const originalFiles = new Set()
  const originalDirs = new Set()

  function processOriginalPath(filePath) {
    originalFiles.add(filePath)
    let dir = path.dirname(filePath)
    while (dir !== config.rootDir) {
      originalDirs.add(dir)
      dir = path.dirname(dir)
    }
  }

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
  const files = await getAllMarkdownFiles(config.rootDir)
  files.forEach(processOriginalPath)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫
  for (const [langCode, lang] of Object.entries(config.languages)) {
    const langDir = path.join(config.rootTranslateDir, lang.code) // –¥–æ–±–∞–≤–ª—è–µ–º lang.code
    if (!fs.existsSync(langDir)) continue

    console.log(`\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ${lang.name}...`)
    let removedFiles = 0
    let removedDirs = 0
    let removedLogs = 0

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞
    async function checkTranslatedFiles(dir) {
      const items = fs.readdirSync(dir)

      for (const item of items) {
        const fullPath = path.join(dir, item)
        const stat = fs.statSync(fullPath)

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        if (config.exclude?.some((excluded) => fullPath.includes(excluded))) {
          continue
        }

        if (stat.isDirectory()) {
          await checkTranslatedFiles(fullPath)
        } else {
          if (item.endsWith(".log")) {
            // –£–¥–∞–ª—è–µ–º .log —Ñ–∞–π–ª—ã
            fs.unlinkSync(fullPath)
            removedLogs++
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –ª–æ–≥ —Ñ–∞–π–ª: ${path.relative(langDir, fullPath)}`)
          } else if (item.endsWith(".md")) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º markdown —Ñ–∞–π–ª—ã
            const relativePath = path.relative(langDir, fullPath)
            const originalPath = path.join(config.rootDir, relativePath)

            if (!originalFiles.has(originalPath)) {
              fs.unlinkSync(fullPath)
              removedFiles++
              console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: ${relativePath}`)
            }
          }
        }
      }
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    await checkTranslatedFiles(langDir)

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    function removeEmptyDirs(dir) {
      const items = fs.readdirSync(dir)

      for (const item of items) {
        const fullPath = path.join(dir, item)
        if (fs.statSync(fullPath).isDirectory()) {
          removeEmptyDirs(fullPath)
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —Ä–µ–∫—É—Ä—Å–∏–∏
          if (fs.readdirSync(fullPath).length === 0) {
            fs.rmdirSync(fullPath)
            removedDirs++
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.relative(langDir, fullPath)}`)
          }
        }
      }
    }

    removeEmptyDirs(langDir)

    if (removedFiles > 0 || removedDirs > 0 || removedLogs > 0) {
      console.log(`‚ú® –û—á–∏—â–µ–Ω–æ ${removedFiles} —Ñ–∞–π–ª–æ–≤, ${removedDirs} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ ${removedLogs} –ª–æ–≥ —Ñ–∞–π–ª–æ–≤`)
    } else {
      console.log(`‚ú® –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞`)
    }
  }
}

async function cleanupTranslations() {
  console.log("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤...")

  const configLangDir = path.join(config.configTranslateDir)

  if (!fs.existsSync(configLangDir)) {
    return
  }

  let totalRemoved = 0
  const removedFiles = []

  const configFiles = fs.readdirSync(configLangDir)
  for (const file of configFiles) {
    if (!file.endsWith(".ts")) continue
    const langCode = file.replace(".ts", "")

    if (langCode === "en" || Object.values(config.languages).some((l) => l.code === langCode)) {
      continue
    }

    const configPath = path.join(configLangDir, file)
    fs.unlinkSync(configPath)
    totalRemoved++
    removedFiles.push(configPath)
  }

  if (totalRemoved > 0) {
    console.log(`\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${totalRemoved} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤:`)
    removedFiles.forEach((file) => console.log(`  - ${file}`))
    console.log("")
  } else {
    console.log("‚ú® –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")
  }
}

async function translateFile(file, targetPath, lang, firstModelKey) {
  const startTime = Date.now()
  const content = fs.readFileSync(file, "utf8")
  let translatedContent = ""

  try {
    const parts = splitByH2(content)

    for (const part of parts) {
      const translatedPart = await translateMarkdown(part, firstModelKey, lang.name, lang.code)
      translatedContent += translatedPart + "\n\n"
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
    translatedContent = applyContentReplacements(translatedContent, lang.code)

    fs.mkdirSync(path.dirname(targetPath), { recursive: true })
    fs.writeFileSync(targetPath, translatedContent.trim())

    const duration = ((Date.now() - startTime) / 1000).toFixed(1)
    const relativePath = path.relative(config.rootDir, file)
    console.log(`‚úÖ ${relativePath} ‚Üí ${lang.name} (${duration}s)`)
  } catch (error) {
    const relativePath = path.relative(config.rootDir, file)
    console.error(`‚ùå ${relativePath} ‚Üí ${lang.name}: ${error.message}`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (translatedContent.trim()) {
      const logPath = targetPath.replace(".md", ".log")
      fs.writeFileSync(logPath, translatedContent.trim())
    }
  }
}

async function translateFiles() {
  try {
    const firstModelKey = Object.keys(config.models)[0]
    console.log(`üí° –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –º–æ–¥–µ–ª–∏: ${firstModelKey}`)

    await syncFileStructure() // –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞
    await cleanupTranslations()

    // –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –±–µ—Ä–µ–º –∏–∑ configDir
    const sourceConfigPath = path.join(config.configDir, "en.ts")
    console.log(`üìù –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ ${sourceConfigPath}`)

    if (!fs.existsSync(sourceConfigPath)) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: ${sourceConfigPath}`)
    }

    try {
      const sourceConfig = fs.readFileSync(sourceConfigPath, "utf8")

      for (const [langCode, lang] of Object.entries(config.languages)) {
        const targetConfigPath = path.join(config.configTranslateDir, `${lang.code}.ts`)

        const startTime = Date.now()

        if (!(await needsTranslation(sourceConfigPath, targetConfigPath))) {
          console.log(`‚ú® –ö–æ–Ω—Ñ–∏–≥ ${lang.name} –∞–∫—Ç—É–∞–ª–µ–Ω`)
          continue
        }

        try {
          const translatedConfig = await translateMarkdown(sourceConfig, firstModelKey, lang.name, lang.code)

          // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É
          const finalConfig = applyContentReplacements(translatedConfig, lang.code)

          const configDir = path.dirname(targetConfigPath)
          if (!fs.existsSync(configDir)) {
            fs.mkdirSync(configDir, { recursive: true })
          }

          fs.writeFileSync(targetConfigPath, finalConfig)

          const duration = ((Date.now() - startTime) / 1000).toFixed(1)
          console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥ ‚Üí ${lang.name} (${duration}s)`)
        } catch (error) {
          console.error(`‚ùå –ö–æ–Ω—Ñ–∏–≥ ‚Üí ${lang.name}: ${error.message}`)
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:`, error.message)
    }

    const files = await getAllMarkdownFiles(config.rootDir)
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${files.length} markdown —Ñ–∞–π–ª–æ–≤ –≤ ${config.rootDir}`)

    const tasks = []

    for (const [langCode, lang] of Object.entries(config.languages)) {
      for (const file of files) {
        const relativePath = path.relative(config.rootDir, file)

        const targetPath = path.join(config.rootTranslateDir, lang.code, relativePath)

        if (await needsTranslation(file, targetPath)) {
          tasks.push({ file, lang, targetPath })
        }
      }
    }

    if (tasks.length === 0) {
      console.log("‚ú® –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
      return
    }

    console.log(`‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ${tasks.length} —Ñ–∞–π–ª–æ–≤`)

    for (const task of tasks) {
      await translateFile(task.file, task.targetPath, task.lang, firstModelKey)
    }

    console.log("\n‚ú® –ì–æ—Ç–æ–≤–æ!")
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞:`, error.message)
  }
}

translateFiles()
