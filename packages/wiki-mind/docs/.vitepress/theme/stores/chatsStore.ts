// .vitepress/theme/stores/chatsStore.ts
import { defineStore } from "pinia"
import { ref, watch } from "vue"
import type { UIMessage } from "@ai-sdk/ui-utils"

export interface ChatInfo {
  id: string
  title?: string
  messages: UIMessage[]
  timestamp: number
}

export const useChatsStore = defineStore("chats", () => {
  // –°–ø–∏—Å–æ–∫ ID –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ)
  const chatIds = ref<string[]>([])

  // ID —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º, –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º)
  const selectedChatId = ref<string>("")

  // ID –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è/–∑–∞–≥–æ–ª–æ–≤–æ–∫)
  const tempChatId = ref<string>("")

  // –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö, –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö)
  const chatsData = ref<Record<string, ChatInfo>>({})

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ä–µ–¥—É
  const isClient = typeof window !== "undefined"

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
  const loadFromStorage = () => {
    if (!isClient) return

    try {
      const storedIds = localStorage.getItem("chat_ids")
      const storedData = localStorage.getItem("chats_data")

      if (storedIds) {
        chatIds.value = JSON.parse(storedIds)

        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (chatIds.value.length > 0) {
          selectedChatId.value = chatIds.value[0]
        }
      }

      if (storedData) {
        chatsData.value = JSON.parse(storedData)
      }
    } catch (e) {
      console.error("Error loading chats from storage:", e)
      chatIds.value = []
      chatsData.value = {}
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (isClient) {
    loadFromStorage()
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  if (isClient) {
    watch(
      [chatIds, chatsData],
      ([newIds, newData]) => {
        try {
          localStorage.setItem("chat_ids", JSON.stringify(newIds))
          localStorage.setItem("chats_data", JSON.stringify(newData))
        } catch (e) {
          console.error("Error saving chats to storage:", e)
        }
      },
      { deep: true },
    )
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
  const createTempChat = () => {
    const chatId = Date.now().toString()

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (tempChatId.value && chatsData.value[tempChatId.value]?.messages.length === 0) {
      selectedChatId.value = tempChatId.value
      return tempChatId.value
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç
    tempChatId.value = chatId
    chatsData.value[chatId] = {
      id: chatId,
      messages: [],
      timestamp: Date.now(),
    }
    selectedChatId.value = chatId

    console.log(`üü¢ CLIENT: –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç: ${chatId}`)
    return chatId
  }

  // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ (–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤–æ "–≤–∑—Ä–æ—Å–ª—ã–π" —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ)
  const publishTempChat = (chatId: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç
    if (chatId === tempChatId.value && chatsData.value[chatId]) {
      // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      chatIds.value.unshift(chatId)

      console.log(`üü¢ CLIENT: –í—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç ${chatId} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫`)

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç
      tempChatId.value = ""

      return true
    }
    return false
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ (–≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π)
  const createNewChat = () => {
    return createTempChat()
  }

  // –í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞
  const selectChat = (chatId: string) => {
    // –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
    if (selectedChatId.value !== chatId) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (tempChatId.value && chatsData.value[tempChatId.value]?.messages.length === 0 && !chatIds.value.includes(tempChatId.value)) {
        delete chatsData.value[tempChatId.value]

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
        if (selectedChatId.value === tempChatId.value) {
          selectedChatId.value = ""
        }
        tempChatId.value = ""
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
      selectedChatId.value = chatId
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
  const removeChat = (chatId: string) => {
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const index = chatIds.value.indexOf(chatId)
    if (index > -1) {
      chatIds.value.splice(index, 1)

      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç, –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
      if (chatId === tempChatId.value) {
        tempChatId.value = ""
      }

      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
      delete chatsData.value[chatId]

      // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
      if (selectedChatId.value === chatId) {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if (chatIds.value.length > 0) {
          selectedChatId.value = chatIds.value[0]
        } else {
          createNewChat()
        }
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  const saveMessages = (chatId: string, messages: UIMessage[]) => {
    if (!isClient || !chatId) return

    if (chatsData.value[chatId]) {
      const isFirstMessage = chatsData.value[chatId].messages.length === 0 && messages.length > 0

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
      chatsData.value[chatId].messages = messages
      chatsData.value[chatId].timestamp = Date.now()

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π - –ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ
      if (isFirstMessage && chatId === tempChatId.value && !chatIds.value.includes(chatId)) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const firstUserMessage = messages.find((msg) => msg.role === "user")
        if (firstUserMessage) {
          // –ó–∞–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
          chatsData.value[chatId].title = firstUserMessage.content
        }

        // –ü—É–±–ª–∏–∫—É–µ–º —á–∞—Ç
        publishTempChat(chatId)
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  const getMessages = (chatId: string): UIMessage[] => {
    return chatsData.value[chatId]?.messages || []
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
  const getChatTitle = (chatId: string): string | undefined => {
    return chatsData.value[chatId]?.title
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
  const setChatTitle = (chatId: string, title: string) => {
    if (!isClient || !chatId) return

    if (chatsData.value[chatId]) {
      chatsData.value[chatId].title = title || undefined

      // –ï—Å–ª–∏ —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø–æ–ª—É—á–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ
      if (chatId === tempChatId.value && title && !chatIds.value.includes(chatId)) {
        publishTempChat(chatId)
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–º
  const isTempChat = (chatId: string): boolean => {
    return chatId === tempChatId.value
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  const ensureChat = () => {
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
    if (!selectedChatId.value) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π
      if (chatIds.value.length > 0) {
        selectedChatId.value = chatIds.value[0]
      } else {
        // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        createTempChat()
      }
    }
  }

  return {
    chatIds,
    selectedChatId,
    tempChatId,
    createNewChat,
    selectChat,
    removeChat,
    saveMessages,
    getMessages,
    getChatTitle,
    setChatTitle,
    ensureChat,
    isTempChat,
    publishTempChat,
  }
})
