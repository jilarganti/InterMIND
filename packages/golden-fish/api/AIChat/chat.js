// api/chat.js
import { anthropic } from "@ai-sdk/anthropic"
import { openai } from "@ai-sdk/openai"
import { groq } from "@ai-sdk/groq"
// import { deepseek } from "@ai-sdk/deepseek"
import { streamText } from "ai"
import { BUSINESS_PROMPT, FOLLOW_UP_PROMPT } from "../../docs/.vitepress/config/AIConfig.js"
import fs from "fs"
import fetch from "node-fetch"

// Allow streaming responses up to 30 seconds
export const maxDuration = 30
let llmsTxt

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ figure –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {string} - –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
function removeFigureTags(content) {
  if (typeof content !== "string") return content

  // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <figure> –∏ </figure> –∏ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–∂–¥—É –Ω–∏–º–∏
  return content.replace(/<figure\b[^>]*>[\s\S]*?<\/figure>/gi, "")
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞
 * @param {{ json: () => any; }} req
 */
export async function POST(req) {
  console.log("üîµ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /api/chat")

  // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
  llmsTxt = await getContent("docs/.vitepress/dist/llms.txt", "llmsTxt")
  llmsTxt = llmsTxt.replace(/\.md/g, "")

  try {
    const body = await req.json()
    let messages = body.messages || []
    const { mode, language } = body

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ body (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default')
    // const mode = body.mode || "default"
    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ body (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')

    // const language = body.language || "ru"

    console.log(`üîµ API: –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–∂–∏–º: ${mode}, —è–∑—ã–∫: ${language}`)

    /**
     * –ö–æ—Å—Ç—ã–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–≥–æ–≤ figure. –í –Ω–æ—Ä–º–µ —Ç–µ–≥–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.
     */
    // @ts-ignore
    const cleanedMessages = messages.map((msg) => {
      if (msg.role === "assistant") {
        return {
          ...msg,
          content: removeFigureTags(msg.content),
        }
      }
      return msg
    })

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = cleanedMessages

    // –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let systemPrompt = BUSINESS_PROMPT // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–º–ø—Ç

    console.log("üîµ API: –†–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞: " + mode)

    if (mode === "followup") {
      systemPrompt = FOLLOW_UP_PROMPT
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    systemPrompt = `${llmsTxt} \n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ: ${language}. \n` + systemPrompt

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
    const promptLength = systemPrompt.length
    console.log(`üîç –†–∞–∑–º–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: ${promptLength} —Å–∏–º–≤–æ–ª–æ–≤`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    const result = streamText({
      model: anthropic("claude-3-5-haiku-20241022"), // –ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
      system: systemPrompt,
      messages,
      maxTokens: 4000,
      temperature: 0.3,
      presencePenalty: 0.3,
      frequencyPenalty: 0.3,
    })

    console.log("üîµ API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥...")

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç streamText
    return result.toDataStreamResponse()
  } catch (error) {
    console.error("üî¥ API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error)

    return new Response(JSON.stringify({ error: String(error) }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    })
  }
}

async function getContent(filePath, tag) {
  let content

  // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (vercel dev) —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  // VERCEL_ENV –º–æ–∂–µ—Ç –±—ã—Ç—å 'development' –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ vercel dev
  const isLocalDev =
    process.env.VERCEL_ENV === "development" ||
    process.env.NODE_ENV === "development" ||
    !process.env.VERCEL_URL ||
    process.env.VERCEL_URL?.includes("localhost")

  if (isLocalDev) {
    content = fs.readFileSync(filePath, "utf8")
  } else {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è production/preview
    const baseUrl = "https://" + (process.env.VERCEL_URL || process.env.VERCEL_BRANCH_URL)
    // –ù–∞—Ö–æ–¥–∏–º –≤ –ø—É—Ç–∏ "/dist/" –∏ –æ—Ç—Å–µ–∫–∞–µ–º –≤—Å—ë –¥–æ –∏ –≤–∫–ª—é—á–∞—è
    let urlPath = filePath
    const distIndex = filePath.indexOf("/dist/")

    if (distIndex !== -1) {
      urlPath = filePath.substring(distIndex + 6) // +6 —á—Ç–æ–±—ã –æ—Ç—Å–µ—á—å –∏ —Å–∞–º "/dist/"
    }

    const fullUrl = `${baseUrl}/${urlPath}`
    console.log("üîµ API: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ URL:", fullUrl)
    const response = await fetch(fullUrl, {
      headers: {
        "x-vercel-protection-bypass": process.env.VERCEL_AUTOMATION_BYPASS_SECRET || "",
      },
    })

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ${fullUrl}`)
    }

    content = await response.text()
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ–≥–æ–º
  return `<${tag}>\n${content}\n</${tag}>`
}
