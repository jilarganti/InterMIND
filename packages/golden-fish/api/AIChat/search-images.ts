/**
 * Search Images API Endpoint
 *
 * REST API endpoint for searching images using Google Custom Search.
 * Handles query processing, normalization, caching, and response optimization.
 * Provides efficient image search with memory caching and CDN optimization.
 *
 * Features:
 * - Query parameter extraction and validation
 * - Query normalization for consistent caching
 * - In-memory caching with TTL
 * - Configurable result limits (1-10)
 * - CDN-optimized headers
 * - Cache cleanup and management
 * - Error handling and logging
 */

import { searchImages } from "./image-service.js"

// Types
interface SearchResult {
  images: Array<{
    url: string
    title: string
  }>
}

interface CacheEntry {
  timestamp: number
  data: SearchResult
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
 */
function normalizeQuery(query: string): string {
  if (!query) return ""
  return query
    .trim()
    .toLowerCase()
    .replace(/\s+/g, " ")
    .replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, "")
}

/**
 * –ö–µ—à –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
 */
const memoryCache = new Map<string, CacheEntry>()

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ –ø–∞–º—è—Ç–∏ - 1 —á–∞—Å (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const CACHE_TTL = 60 * 60 * 1000

export async function GET(request: Request): Promise<Response> {
  console.log("üîµ SEARCH-API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  const url = new URL(request.url)
  const query = url.searchParams.get("q")
  const limit = parseInt(url.searchParams.get("limit") || "1", 10)

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ limit –¥–æ 10
  const validLimit = Math.min(Math.max(1, limit), 10)

  if (!query) {
    console.error("üî¥ SEARCH-API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ 'q'")
    return new Response(JSON.stringify({ error: "Missing query parameter" }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    })
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const normalizedQuery = normalizeQuery(query)
  console.log(`üîµ SEARCH-API: –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}" (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: "${normalizedQuery}", limit: ${validLimit})`)

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à–µ –≤ –ø–∞–º—è—Ç–∏
  const now = Date.now()
  const cachedResult = memoryCache.get(`${normalizedQuery}_${validLimit}`) // –ò—Å–ø–æ–ª—å–∑—É–µ–º limit –∫–∞–∫ —á–∞—Å—Ç—å –∫–ª—é—á–∞ –∫–µ—à–∞

  if (cachedResult && now - cachedResult.timestamp < CACHE_TTL) {
    console.log(`üîµ SEARCH-API: –ù–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è "${normalizedQuery}"`)
    return new Response(JSON.stringify(cachedResult.data), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        "Cache-Control": "public, max-age=86400, s-maxage=604800",
        "X-Cache": "HIT",
      },
    })
  }

  try {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
    const images = await searchImages(query, validLimit)
    console.log(`üîµ SEARCH-API: –ù–∞–π–¥–µ–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result: SearchResult = { images }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à–µ –≤ –ø–∞–º—è—Ç–∏
    memoryCache.set(`${normalizedQuery}_${validLimit}`, {
      timestamp: now,
      data: result,
    })

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 100
    if (memoryCache.size > 100) {
      const keysToDelete: string[] = []

      memoryCache.forEach((value, key) => {
        if (now - value.timestamp > CACHE_TTL) {
          keysToDelete.push(key)
        }
      })

      keysToDelete.forEach((key) => memoryCache.delete(key))
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Vercel Edge Network, —Ä–∞–±–æ—Ç–∞—é—Ç –∏ —Å Vitepress
    return new Response(JSON.stringify(result), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:
        "Cache-Control": "public, max-age=86400, s-maxage=604800",
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –¥–ª—è CDN:
        "CDN-Cache-Control": "public, max-age=604800",
        "Vercel-CDN-Cache-Control": "public, max-age=604800",
        // –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:
        "stale-while-revalidate": "86400",
        // –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        "X-Cache": "MISS",
      },
    })
  } catch (error) {
    console.error("üî¥ SEARCH-API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error)
    return new Response(
      JSON.stringify({
        error: "Error searching for images",
        details: String(error),
      }),
      {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          "Cache-Control": "no-store, no-cache",
        },
      },
    )
  }
}
