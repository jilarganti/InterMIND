/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
 *
 * –ó–∞–ø—É—Å–∫: node --experimental-specifier-resolution=node --loader ts-node/esm __tests__/crm/test-traffic-sources.ts
 */

import fetch from "node-fetch"
import { v4 as uuidv4 } from "uuid"

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_ENDPOINT = process.env.API_ENDPOINT || "http://localhost:5173/api/createContactAndLead"
const SITE_ORIGIN_ID = process.env.SITE_ORIGIN_ID || "test-origin-id"

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
interface TrafficSource {
  name: string
  params?: Record<string, string>
  referrer?: string
  expectedSource: string
}

interface FormData {
  name: string
  email: string
  webSite: string
  category: string
  message: string
  channel: string
  channelId: string
  originId: string
  leadSource: string
  countryCode: string
  countryName: string
}

interface ApiResponse {
  success: boolean
  message?: string
}

interface TestResult {
  source: string
  success: boolean
  leadSource?: string
  expectedSource?: string
  match?: boolean
  error?: string
}

// –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
const trafficSources: TrafficSource[] = [
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
  {
    name: "Google Ads Search",
    params: { utm_source: "google_ads", utm_medium: "cpc", utm_campaign: "winter_2025" },
    expectedSource: "ADS[winter_2025]",
  },
  {
    name: "Google Ads Display",
    params: { utm_source: "google_ads", utm_medium: "display", utm_campaign: "spring_promo" },
    expectedSource: "ADS[spring_promo]",
  },
  {
    name: "Bing Ads",
    params: { utm_source: "bing", utm_medium: "cpc", utm_campaign: "banking_uae" },
    expectedSource: "ADS[banking_uae]",
  },

  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
  {
    name: "Facebook",
    params: { utm_source: "facebook", utm_medium: "social", utm_campaign: "social_posts" },
    expectedSource: "social_posts[social]",
  },
  {
    name: "Instagram",
    params: { utm_source: "instagram", utm_medium: "social", utm_campaign: "stories" },
    expectedSource: "stories[social]",
  },

  // Email –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
  {
    name: "Newsletter",
    params: { utm_source: "newsletter", utm_medium: "email", utm_campaign: "weekly_update" },
    expectedSource: "weekly_update[email]",
  },

  // –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (—á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã)
  {
    name: "Google Organic",
    referrer: "https://www.google.com/search?q=golden+visa+uae",
    expectedSource: "Organic",
  },
  {
    name: "Bing Organic",
    referrer: "https://www.bing.com/search?q=business+setup+dubai",
    expectedSource: "Organic",
  },

  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
  {
    name: "Partner Website",
    referrer: "https://partner-website.com/recommended-services",
    expectedSource: "Referral",
  },

  // –ü—Ä—è–º–æ–π —Ç—Ä–∞—Ñ–∏–∫
  {
    name: "Direct Traffic",
    expectedSource: "Direct",
  },
]

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
 * @param sourceName - –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
 */
function createTestFormData(sourceName: string): Omit<FormData, "leadSource"> {
  const testId = uuidv4().substring(0, 8)
  return {
    name: `[test] Traffic Source ${sourceName} - ${testId}`,
    email: `test.${testId}@example.com`,
    webSite: "https://companyname.com/",
    category: "Contacts",
    message: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: ${sourceName}`,
    channel: "Web forms",
    channelId: "Test Script",
    originId: SITE_ORIGIN_ID,
    countryCode: "US",
    countryName: "United States",
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
 * @param source - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ç—Ä–∞—Ñ–∏–∫–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function sendTestLead(source: TrafficSource): Promise<TestResult> {
  try {
    console.log(`üîµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${source.name}`)

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
    const formDataBase = createTestFormData(source.name)
    let leadSource: string

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    if (source.params) {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      leadSource = determineSourceFromUtm(source.params)
    } else if (source.referrer) {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º referrer
      leadSource = determineSourceFromReferrer(source.referrer)
    } else {
      // –ü—Ä—è–º–æ–π —Ç—Ä–∞—Ñ–∏–∫
      leadSource = "Direct"
    }

    const formData: FormData = {
      ...formDataBase,
      leadSource,
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º: ${formData.leadSource}`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    const response = await fetch(API_ENDPOINT, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    })

    const responseData = (await response.json()) as ApiResponse

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (responseData.success) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${source.name} ‚Üí ${formData.leadSource}`)
      if (formData.leadSource === source.expectedSource) {
        console.log(`‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${source.expectedSource}`)
      } else {
        console.log(`‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è ${source.expectedSource}, –ø–æ–ª—É—á–µ–Ω ${formData.leadSource}`)
      }
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${responseData.message}`)
    }

    return {
      source: source.name,
      success: responseData.success,
      leadSource: formData.leadSource,
      expectedSource: source.expectedSource,
      match: formData.leadSource === source.expectedSource,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ${source.name}:`, errorMessage)
    return {
      source: source.name,
      success: false,
      error: errorMessage,
    }
  }
}

/**
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * @param params - UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
 */
function determineSourceFromUtm(params: Record<string, string>): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Ä–µ–∫–ª–∞–º—É
  if (params.utm_source === "google_ads" || params.utm_medium === "cpc") {
    if (params.utm_campaign) {
      return `ADS[${params.utm_campaign}]`
    }
    return "ADS"
  }

  // –î—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –∫–∞–º–ø–∞–Ω–∏—è–º–∏
  if (params.utm_campaign) {
    if (params.utm_medium) {
      return `${params.utm_campaign}[${params.utm_medium}]`
    }
    return params.utm_campaign
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ utm_source
  if (params.utm_source) {
    return params.utm_source
  }

  return "Unknown"
}

/**
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ referrer
 * @param referrer - URL —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
 * @returns –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
 */
function determineSourceFromReferrer(referrer: string): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
  const searchEngines = ["google.", "bing.", "yahoo.", "yandex.", "baidu."]
  const isOrganic = searchEngines.some((engine) => referrer.includes(engine))

  return isOrganic ? "Organic" : "Referral"
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
 */
async function runTests(): Promise<void> {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞")

  const results: TestResult[] = []
  const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))

  // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  for (const source of trafficSources) {
    const result = await sendTestLead(source)
    results.push(result)

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
    await delay(2000)
  }

  // –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
  console.log("\nüìä –û—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:")
  console.log("------------------------")

  let successCount = 0
  let matchCount = 0

  results.forEach((result) => {
    const statusIcon = result.success ? "‚úÖ" : "‚ùå"
    console.log(`${statusIcon} ${result.source}: ${result.success ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞"}`)

    if (result.success) {
      successCount++
      const matchIcon = result.match ? "‚úì" : "‚úó"
      console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.leadSource} (–æ–∂–∏–¥–∞–ª—Å—è: ${result.expectedSource}) ${matchIcon}`)

      if (result.match) matchCount++
    } else if (result.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`)
    }
  })

  console.log("------------------------")
  console.log(`–ò—Ç–æ–≥–æ: ${successCount}/${results.length} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, ${matchCount}/${successCount} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`)
  console.log("\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–¥—ã –≤ CRM, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!")
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch((error) => {
  console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error)
  process.exit(1)
})
