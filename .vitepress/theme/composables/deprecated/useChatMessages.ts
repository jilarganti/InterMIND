import { ref, watch, nextTick } from "vue"
import type { Ref } from "vue"
import { useChat } from "@ai-sdk/vue"
import { useChatsStorage } from "./useChatsStorage"
import { useImageProcessing } from "./useImageProcessing"
import { useScrollToBottom } from "./useScrollToBottom"
import type { UIMessage } from "@ai-sdk/ui-utils"

export function useChatMessages(chatId: string, messagesContainerRef: Ref<HTMLDivElement | null>, textareaRef: Ref<HTMLTextAreaElement | null>) {
  const { saveMessages, getMessages } = useChatsStorage()
  const { processImagesInMessage } = useImageProcessing()
  const { scrollToBottom } = useScrollToBottom(messagesContainerRef)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  const currentChatId = ref(chatId)

  // –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤ –≤–º–µ—Å—Ç–æ ref
  let checkForImageMarkersTimer: number | null = null

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
  const isStreamActive = ref(false)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
  const clearImageMarkersTimer = () => {
    if (checkForImageMarkersTimer !== null) {
      console.log("üîß CLIENT: –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
      window.clearInterval(checkForImageMarkersTimer)
      checkForImageMarkersTimer = null
    }
  }

  const { messages, input, handleSubmit, status, error, stop, setMessages } = useChat({
    api: "/api/chat",
    id: chatId,
    initialMessages: getMessages(chatId),
    body: {
      stream: true,
    },
    headers: {
      "Content-Type": "application/json",
    },
    onResponse: (response) => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
    },
    onFinish: async () => {
      console.log(`üü¢ CLIENT: –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`)

      // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
      clearImageMarkersTimer()

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
      isStreamActive.value = false

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
      if (messages.value.length > 0) {
        const lastIndex = messages.value.length - 1
        const lastMessage = messages.value[lastIndex]

        if (lastMessage.role === "assistant") {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
          const processedMessage = await processImagesInMessage(lastMessage)

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
          if (processedMessage !== lastMessage) {
            console.log(`üü¢ CLIENT: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`)

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const updatedMessages = [...messages.value]
            updatedMessages[lastIndex] = processedMessage

            setMessages(updatedMessages)
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      saveMessages(currentChatId.value, messages.value)

      // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑
      nextTick(() => {
        scrollToBottom()
      })
    },
    onError: (error) => {
      console.error("Chat error:", error)

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
      clearImageMarkersTimer()

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
      isStreamActive.value = false
    },
  })

  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
  watch(
    () => status.value,
    (newStatus) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
      isStreamActive.value = newStatus === "streaming"

      // –ï—Å–ª–∏ —Å—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (newStatus !== "streaming") {
        clearImageMarkersTimer()
      }
    }
  )

  // –°–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã textarea
  const resetTextareaHeight = (): void => {
    if (textareaRef.value) {
      textareaRef.value.style.height = "auto"
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
  const handleSubmitWithScroll = async (event: Event): Promise<void> => {
    event.preventDefault()

    if (!input.value.trim() || status.value === "streaming") {
      return
    }

    try {
      // –ü–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      clearImageMarkersTimer()

      await handleSubmit(event)
      scrollToBottom()
      resetTextareaHeight()
    } catch (e) {
      console.error("Failed to send message:", e)
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
  const handleStop = (): void => {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∏–º–∞
    clearImageMarkersTimer()

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    stop()
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  watch(
    messages,
    () => {
      scrollToBottom()
    },
    { deep: true },
  )

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º chatId –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  watch(
    () => chatId,
    (newChatId, oldChatId) => {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —á–∞—Ç–∞
      clearImageMarkersTimer()

      currentChatId.value = newChatId

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Ç–∞
      if (oldChatId && messages.value.length > 0) {
        saveMessages(oldChatId, messages.value)
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ setMessages
      const savedMessages = getMessages(newChatId)
      setMessages(savedMessages)
    },
    { immediate: true },
  )

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  watch(
    messages,
    (newMessages) => {
      if (newMessages.length > 0) {
        saveMessages(currentChatId.value, newMessages)
      }
    },
    { deep: true },
  )

  return {
    messages,
    input,
    status,
    error,
    handleSubmitWithScroll,
    handleStop,
    setMessages,
  }
}