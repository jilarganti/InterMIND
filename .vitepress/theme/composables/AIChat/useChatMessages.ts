import { ref, watch, nextTick } from "vue"
import type { Ref } from "vue"
import { useChat } from "@ai-sdk/vue"
import { useChatsStorage } from "./useChatsStorage"
import { useImageProcessing } from "./useImageProcessing"
import { useScrollToBottom } from "./useScrollToBottom"
import type { UIMessage } from "@ai-sdk/ui-utils"

export function useChatMessages(chatId: string, messagesContainerRef: Ref<HTMLDivElement | null>, textareaRef: Ref<HTMLTextAreaElement | null>) {
  const { saveMessages, getMessages } = useChatsStorage()
  const { processImagesInMessage } = useImageProcessing()
  const { scrollToBottom } = useScrollToBottom(messagesContainerRef)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  const currentChatId = ref(chatId)

  const { messages, input, handleSubmit, status, error, stop, setMessages } = useChat({
    api: "/api/chat",
    id: chatId,
    initialMessages: getMessages(chatId),
    body: {
      stream: true,
    },
    headers: {
      "Content-Type": "application/json",
    },
    onResponse: (response) => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
    },
    onFinish: async () => {
      console.log(`üü¢ CLIENT: –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`)

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
      if (messages.value.length > 0) {
        const lastIndex = messages.value.length - 1
        const lastMessage = messages.value[lastIndex]

        if (lastMessage.role === "assistant") {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
          const processedMessage = await processImagesInMessage(lastMessage)

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
          if (processedMessage !== lastMessage) {
            console.log(`üü¢ CLIENT: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`)
            messages.value = [...messages.value.slice(0, lastIndex), processedMessage]
          }
        }
      }

      saveMessages(currentChatId.value, messages.value)
      scrollToBottom()
    },
    onError: (error) => {
      console.error("Chat error:", error)
    },
  })

  // –°–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã textarea
  const resetTextareaHeight = (): void => {
    if (textareaRef.value) {
      textareaRef.value.style.height = "auto"
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
  const handleSubmitWithScroll = async (event: Event): Promise<void> => {
    event.preventDefault()

    if (!input.value.trim() && status.value !== "streaming") {
      return
    }

    try {
      await handleSubmit(event)
      scrollToBottom()
      resetTextareaHeight()
    } catch (e) {
      console.error("Failed to send message:", e)
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
  const handleStop = (): void => {
    stop()
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  watch(
    messages,
    () => {
      scrollToBottom()
    },
    { deep: true },
  )

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º chatId –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  watch(
    () => chatId,
    (newChatId, oldChatId) => {
      currentChatId.value = newChatId

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Ç–∞
      if (oldChatId && messages.value.length > 0) {
        saveMessages(oldChatId, messages.value)
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ setMessages
      const savedMessages = getMessages(newChatId)
      setMessages(savedMessages)
    },
    { immediate: true },
  )

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  watch(
    messages,
    (newMessages) => {
      if (newMessages.length > 0) {
        saveMessages(currentChatId.value, newMessages)
      }
    },
    { deep: true },
  )

  return {
    messages,
    input,
    status,
    error,
    handleSubmitWithScroll,
    handleStop,
    setMessages,
  }
}
