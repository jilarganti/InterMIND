// .vitepress/theme/composables/useChatUi.ts
import { nextTick, ref } from "vue"
import type { Ref } from "vue"
import MarkdownIt from "markdown-it"

interface ImageClickHandlers {
  setupImageClicks: () => void
  cleanupImageClicks: () => void
}

export function useChatUi(
  messagesContainerRef: Ref<HTMLDivElement | null>,
  textareaRef?: Ref<HTMLTextAreaElement | null>,
  input?: Ref<string>,
  setMode?: (mode: string) => void,
) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  const isMobile = ref(false)

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (typeof window !== "undefined") {
    isMobile.value = window.innerWidth < 768

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener("resize", () => {
      isMobile.value = window.innerWidth < 768
    })
  }

  /**
   * –°–∫—Ä–æ–ª–ª –∫ –∫–æ–Ω—Ü—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  const scrollToBottom = async (): Promise<void> => {
    await nextTick()
    if (messagesContainerRef.value) {
      const container = messagesContainerRef.value
      container.scrollTop = container.scrollHeight
    }
  }

  /**
   * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å textarea
   */
  // –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã textarea
  const adjustHeight = (target: HTMLTextAreaElement): void => {
    target.style.height = "auto"
    target.style.height = `${target.scrollHeight}px`
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
  const handleInput = (event: Event): void => {
    if (textareaRef?.value) {
      const textarea = event.target as HTMLTextAreaElement
      adjustHeight(textarea)
    }
  }

  // –°–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã textarea
  const resetHeight = (): void => {
    if (textareaRef?.value) {
      textareaRef.value.style.height = "auto"
    }
  }

  // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
  const insertText = (text: string): void => {
    if (textareaRef?.value && input) {
      const textarea = textareaRef.value
      const start = textarea.selectionStart
      const end = textarea.selectionEnd
      const textBefore = input.value.substring(0, start)
      const textAfter = input.value.substring(end)

      input.value = textBefore + text + textAfter

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      nextTick(() => {
        textarea.focus()
        const newPosition = start + text.length
        textarea.selectionStart = newPosition
        textarea.selectionEnd = newPosition
        adjustHeight(textarea)
      })
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
  const handleKeyDown = (event: KeyboardEvent, submitFn: (event: Event) => void): void => {
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Enter –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if (isMobile.value) {
      return // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    }

    // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ Enter –±–µ–∑ Shift –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault()
      if (input?.value.trim()) {
        submitFn(event)
        resetHeight()
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—Å—ã–ª–∫–∏, blockquotes)
   */
  const setupImageClickHandler = (submitTextFn: (text: string, mode?: string) => void): ImageClickHandlers => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const handleElementClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
      if (target?.classList.contains("chat-interactive-image")) {
        const query = target.getAttribute("data-query")
        if (query) {
          console.log(`üü¢ CLIENT: –ö–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º "${query}"`)

          // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
          const htmlTarget = target as HTMLElement
          htmlTarget.style.transition = "all 0.3s"
          htmlTarget.style.animation = "pulse 1s 2"
          htmlTarget.style.boxShadow = "0 0 0 2px var(--vp-c-brand)"

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
          setTimeout(() => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º followup
            if (setMode) {
              console.log(`üü¢ CLIENT: –ö–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é ‚Üí —Ä–µ–∂–∏–º followup`)
              setMode("followup")
            }
            submitTextFn(query, "followup")

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            setTimeout(() => {
              htmlTarget.style.animation = ""
              htmlTarget.style.boxShadow = ""
            }, 1000)
          }, 300)
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —É —Å—Å—ã–ª–∫–∏ –∏–ª–∏ blockquote (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
      if (target?.classList.contains("interactive-element-button") || target?.closest(".interactive-element-button")) {
        const buttonEl = target.classList.contains("interactive-element-button") ? target : target.closest(".interactive-element-button")
        const query = buttonEl?.getAttribute("data-query")

        if (query && buttonEl) {
          console.log(`üü¢ CLIENT: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º "${query}"`)

          // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
          const htmlButton = buttonEl as HTMLElement
          htmlButton.style.transition = "all 0.3s"
          htmlButton.style.animation = "pulse 1s 1"

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
          setTimeout(() => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º followup
            if (setMode) {
              console.log(`üü¢ CLIENT: –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É ‚Üí —Ä–µ–∂–∏–º followup`)
              setMode("followup")
            }
            submitTextFn(query, "followup")
          }, 300)
        }
      }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    const setupImageClicks = () => {
      messagesContainerRef.value?.addEventListener("click", handleElementClick)
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    const cleanupImageClicks = () => {
      messagesContainerRef.value?.removeEventListener("click", handleElementClick)
    }

    return { setupImageClicks, cleanupImageClicks }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Markdown —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
   */
  const md = new MarkdownIt({
    html: true,
    linkify: true,
    typographer: true,
    breaks: false,
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
  const defaultRender = md.renderer.rules.link_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options))

  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Å—Å—ã–ª–æ–∫: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  md.renderer.rules.link_open = (tokens, idx, options, env, self) => {
    tokens[idx].attrSet("target", "_blank")
    tokens[idx].attrSet("rel", "noopener")
    return defaultRender(tokens, idx, options, env, self)
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π renderer –¥–ª—è blockquote
  const defaultBlockquoteRender = md.renderer.rules.blockquote_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options))

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º renderer –¥–ª—è blockquote
  md.renderer.rules.blockquote_open = (tokens, idx, options, env, self) => {
    return defaultBlockquoteRender(tokens, idx, options, env, self)
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
  const addInteractiveButtons = (html: string): string => {
    // –í—Ä–µ–º–µ–Ω–Ω—ã–π DOM –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å HTML
    const tempDiv = document.createElement("div")
    tempDiv.innerHTML = html

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫: –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–æ–π
    const links = tempDiv.querySelectorAll("a")
    links.forEach((link) => {
      // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
      if (!link.textContent || link.textContent.trim().length < 5) return

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –∏ href
      const linkText = link.textContent.trim()
      const href = link.getAttribute("href") || ""

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ - —Ç–µ–∫—Å—Ç –¥–æ —Å–∫–æ–±–æ–∫ –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
      // –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª—É—á–∞–∏ —Ç–∏–ø–∞ "Dubai Mall Dining Directory [www.thedubaimall.com/dine ]"
      const displayTextMatch = linkText.match(/(.*?)\s*\[.*?\]/)
      const queryText = displayTextMatch ? displayTextMatch[1].trim() : linkText

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–π –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
      const button = document.createElement("button")
      button.className = "interactive-element-button"
      button.setAttribute("data-query", queryText)
      button.setAttribute("title", queryText)
      button.innerHTML = '<span class="interactive-icon">‚ÑπÔ∏è</span>'

      // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ —Å—Å—ã–ª–∫–æ–π
      link.parentNode?.insertBefore(button, link)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ blockquote: –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–∞—á–∞–ª–æ
    const blockquotes = tempDiv.querySelectorAll("blockquote")
    blockquotes.forEach((blockquote) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ blockquote –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
      if (!blockquote.textContent || blockquote.textContent.trim().length < 5) return

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
      const text = blockquote.textContent.trim()
      const queryText = text.replace(/^[\p{Emoji}\s]+/u, "").trim()

      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
      let firstNode = null
      const firstParagraph = blockquote.querySelector("p:first-child")

      if (firstParagraph) {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        const button = document.createElement("button")
        button.className = "interactive-element-button"
        button.setAttribute("data-query", queryText)
        button.setAttribute("title", queryText)
        button.innerHTML = '<span class="interactive-icon">‚ÑπÔ∏è</span>'

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–∞—á–∞–ª–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        firstParagraph.insertBefore(button, firstParagraph.firstChild)
        firstParagraph.insertBefore(document.createTextNode(" "), firstParagraph.childNodes[1])
      } else {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –≤ –Ω–∞—á–∞–ª–æ blockquote
        const button = document.createElement("button")
        button.className = "interactive-element-button"
        button.setAttribute("data-query", queryText)
        button.setAttribute("title", queryText)
        button.innerHTML = '<span class="interactive-icon">‚ÑπÔ∏è</span>'

        blockquote.insertBefore(document.createTextNode(" "), blockquote.firstChild)
        blockquote.insertBefore(button, blockquote.firstChild)
      }
    })

    return tempDiv.innerHTML
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Markdown —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const renderMarkdown = (content: string): string => {
    const renderedHtml = md.render(content)
    return addInteractiveButtons(renderedHtml)
  }

  return {
    // –°–∫—Ä–æ–ª–ª
    scrollToBottom,

    // –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª–µ–º
    handleInput,
    resetHeight,
    insertText,
    handleKeyDown,

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    setupImageClickHandler,

    // Markdown
    renderMarkdown,

    // –£—Ç–∏–ª–∏—Ç—ã
    isMobile,
  }
}
