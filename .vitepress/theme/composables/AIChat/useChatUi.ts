// .vitepress/theme/composables/useChatUi.ts
import { nextTick } from "vue"
import type { Ref } from "vue"
import MarkdownIt from "markdown-it"

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
interface TextareaHandlers {
  adjustHeight: (target: HTMLTextAreaElement) => void
  handleInput: (event: Event) => void
  resetHeight: () => void
  insertText: (text: string) => void
  handleKeyDown: (event: KeyboardEvent, submitFn: (event: Event) => void) => void
}

interface ImageClickHandlers {
  handleImageClick: (event: MouseEvent) => void
  setupImageClicks: () => void
  cleanupImageClicks: () => void
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —á–∞—Ç–∞
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å useScrollToBottom, useTextareaHandler –∏ useMarkdown
 */
export function useChatUi(messagesContainerRef: Ref<HTMLDivElement | null>, textareaRef?: Ref<HTMLTextAreaElement | null>, input?: Ref<string>) {
  /**
   * –ß–∞—Å—Ç—å 1: –°–∫—Ä–æ–ª–ª –∫ –∫–æ–Ω—Ü—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  const scrollToBottom = async (): Promise<void> => {
    await nextTick()
    if (messagesContainerRef.value) {
      const container = messagesContainerRef.value
      container.scrollTop = container.scrollHeight
    }
  }

  /**
   * –ß–∞—Å—Ç—å 2: –†–∞–±–æ—Ç–∞ —Å textarea (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
   */
  let textareaHandlers: TextareaHandlers = {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ textarea –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    adjustHeight: () => {},
    handleInput: () => {},
    resetHeight: () => {},
    insertText: () => {},
    handleKeyDown: () => {},
  }

  if (textareaRef && input) {
    // –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã textarea
    const adjustHeight = (target: HTMLTextAreaElement): void => {
      target.style.height = "auto"
      target.style.height = `${target.scrollHeight}px`
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –≤—ã—Å–æ—Ç—ã
    const handleInput = (event: Event): void => {
      const textarea = event.target as HTMLTextAreaElement
      adjustHeight(textarea)
    }

    // –°–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã textarea
    const resetHeight = (): void => {
      if (textareaRef.value) {
        textareaRef.value.style.height = "auto"
      }
    }

    // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    const insertText = (text: string): void => {
      if (textareaRef.value) {
        const textarea = textareaRef.value
        const start = textarea.selectionStart
        const end = textarea.selectionEnd
        const textBefore = input.value.substring(0, start)
        const textAfter = input.value.substring(end)

        input.value = textBefore + text + textAfter

        // Set cursor position after inserted text
        nextTick(() => {
          textarea.focus()
          const newPosition = start + text.length
          textarea.selectionStart = newPosition
          textarea.selectionEnd = newPosition
          adjustHeight(textarea)
        })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
    const handleKeyDown = (event: KeyboardEvent, submitFn: (event: Event) => void): void => {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault()
        if (input.value.trim()) {
          submitFn(event)
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ textarea –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    textareaHandlers = {
      adjustHeight,
      handleInput,
      resetHeight,
      insertText,
      handleKeyDown,
    }
  }

  /**
   * –ß–∞—Å—Ç—å 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
   */
  const setupImageClickHandler = (submitTextFn: (text: string) => void): ImageClickHandlers => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    function handleImageClick(event: MouseEvent) {
      const target = event.target as HTMLElement

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      if (target && target.classList.contains("chat-interactive-image")) {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        const query = target.getAttribute("data-query")
        if (query) {
          console.log(`üü¢ CLIENT: –ö–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º "${query}"`)

          // –°–æ–∑–¥–∞–µ–º —Ñ–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
          const pulseAnimation = "pulse 1s 2"
          const originalTransition = target.style.transition

          // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
          target.style.transition = "all 0.3s"
          target.style.animation = pulseAnimation
          target.style.boxShadow = "0 0 0 2px var(--vp-c-brand)"

          setTimeout(() => {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç
            submitTextFn(query)

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            setTimeout(() => {
              target.style.animation = ""
              target.style.boxShadow = ""
              target.style.transition = originalTransition
            }, 1000)
          }, 300)
        }
      }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const setupImageClicks = () => {
      if (messagesContainerRef.value) {
        messagesContainerRef.value.addEventListener("click", handleImageClick)
      }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const cleanupImageClicks = () => {
      if (messagesContainerRef.value) {
        messagesContainerRef.value.removeEventListener("click", handleImageClick)
      }
    }

    return {
      handleImageClick,
      setupImageClicks,
      cleanupImageClicks,
    }
  }

  /**
   * –ß–∞—Å—Ç—å 4: –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Markdown
   */
  const md = new MarkdownIt({
    html: true,
    linkify: true,
    typographer: true,
    breaks: false,
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
  const defaultRender = md.renderer.rules.link_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options))

  md.renderer.rules.link_open = (tokens, idx, options, env, self) => {
    tokens[idx].attrSet("target", "_blank")
    tokens[idx].attrSet("rel", "noopener")
    return defaultRender(tokens, idx, options, env, self)
  }

  const renderMarkdown = (content: string): string => {
    return md.render(content)
  }

  return {
    // –°–∫—Ä–æ–ª–ª
    scrollToBottom,

    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
    ...textareaHandlers,

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setupImageClickHandler,

    // Markdown
    renderMarkdown,
  }
}
