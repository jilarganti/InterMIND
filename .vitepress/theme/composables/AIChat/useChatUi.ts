// .vitepress/theme/composables/useChatUi.ts
import { nextTick } from "vue"
import type { Ref } from "vue"
import MarkdownIt from "markdown-it"

interface ImageClickHandlers {
  setupImageClicks: () => void
  cleanupImageClicks: () => void
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —á–∞—Ç–∞
 */
export function useChatUi(messagesContainerRef: Ref<HTMLDivElement | null>, textareaRef?: Ref<HTMLTextAreaElement | null>, input?: Ref<string>) {
  /**
   * –°–∫—Ä–æ–ª–ª –∫ –∫–æ–Ω—Ü—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  const scrollToBottom = async (): Promise<void> => {
    await nextTick()
    if (messagesContainerRef.value) {
      const container = messagesContainerRef.value
      container.scrollTop = container.scrollHeight
    }
  }

  /**
   * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å textarea
   */
  // –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã textarea
  const adjustHeight = (target: HTMLTextAreaElement): void => {
    target.style.height = "auto"
    target.style.height = `${target.scrollHeight}px`
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
  const handleInput = (event: Event): void => {
    if (textareaRef?.value) {
      const textarea = event.target as HTMLTextAreaElement
      adjustHeight(textarea)
    }
  }

  // –°–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã textarea
  const resetHeight = (): void => {
    if (textareaRef?.value) {
      textareaRef.value.style.height = "auto"
    }
  }

  // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
  const insertText = (text: string): void => {
    if (textareaRef?.value && input) {
      const textarea = textareaRef.value
      const start = textarea.selectionStart
      const end = textarea.selectionEnd
      const textBefore = input.value.substring(0, start)
      const textAfter = input.value.substring(end)

      input.value = textBefore + text + textAfter

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      nextTick(() => {
        textarea.focus()
        const newPosition = start + text.length
        textarea.selectionStart = newPosition
        textarea.selectionEnd = newPosition
        adjustHeight(textarea)
      })
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
  const handleKeyDown = (event: KeyboardEvent, submitFn: (event: Event) => void): void => {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault()
      if (input?.value.trim()) {
        submitFn(event)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
   */
  const setupImageClickHandler = (submitTextFn: (text: string) => void): ImageClickHandlers => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    const handleImageClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      if (target?.classList.contains("chat-interactive-image")) {
        const query = target.getAttribute("data-query")
        if (query) {
          console.log(`üü¢ CLIENT: –ö–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º "${query}"`)

          // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
          target.style.transition = "all 0.3s"
          target.style.animation = "pulse 1s 2"
          target.style.boxShadow = "0 0 0 2px var(--vp-c-brand)"

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
          setTimeout(() => {
            submitTextFn(query)

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            setTimeout(() => {
              target.style.animation = ""
              target.style.boxShadow = ""
            }, 1000)
          }, 300)
        }
      }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    const setupImageClicks = () => {
      messagesContainerRef.value?.addEventListener("click", handleImageClick)
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    const cleanupImageClicks = () => {
      messagesContainerRef.value?.removeEventListener("click", handleImageClick)
    }

    return { setupImageClicks, cleanupImageClicks }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Markdown
   */
  const md = new MarkdownIt({
    html: true,
    linkify: true,
    typographer: true,
    breaks: false,
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
  const defaultRender = md.renderer.rules.link_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options))

  md.renderer.rules.link_open = (tokens, idx, options, env, self) => {
    tokens[idx].attrSet("target", "_blank")
    tokens[idx].attrSet("rel", "noopener")
    return defaultRender(tokens, idx, options, env, self)
  }

  const renderMarkdown = (content: string): string => {
    return md.render(content)
  }

  return {
    // –°–∫—Ä–æ–ª–ª
    scrollToBottom,

    // –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª–µ–º
    handleInput,
    resetHeight,
    insertText,
    handleKeyDown,

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setupImageClickHandler,

    // Markdown
    renderMarkdown,
  }
}
