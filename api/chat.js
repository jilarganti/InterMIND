// api/chat.js
import { anthropic } from "@ai-sdk/anthropic"
import { groq } from "@ai-sdk/groq"
import { openai } from "@ai-sdk/openai"
import { deepseek } from "@ai-sdk/deepseek"
import { streamText } from "ai"
import { BUSINESS_PROMPT, FOLLOW_UP_PROMPT } from "../.vitepress/config/AIConfig.js"

// Allow streaming responses up to 30 seconds
export const maxDuration = 30

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞
 * @param {{ json: () => any; }} req
 */
export async function POST(req) {
  console.log("üîµ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /api/chat")

  try {
    const body = await req.json()
    const messages = body.messages || []

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ body (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default')
    const mode = body.mode || "default"
    console.log(`üîµ API: –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–∂–∏–º: ${mode}`)

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (messages.length > 0) {
      console.log(`üîµ API: –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${messages[messages.length - 1].role}: ${messages[messages.length - 1].content.substring(0, 100)}...`)
    }

    console.log(`üîµ API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –≤ —Ä–µ–∂–∏–º–µ ${mode}...`)

    // –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let systemPrompt = BUSINESS_PROMPT // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–º–ø—Ç

    if (mode === "followup") {
      systemPrompt = FOLLOW_UP_PROMPT
      console.log("üîµ API: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    const result = streamText({
      // model: anthropic("claude-3-5-sonnet-20241022"),
      // model: anthropic("claude-3-5-haiku-20241022"),
      model: anthropic("claude-3-sonnet-20240229"),
      // model: anthropic("claude-3-haiku-20240307"),
      // model: groq("gemma2-9b-it"),
      // model: openai("gpt-4-turbo"),
      // model: openai("gpt-4o-mini"),
      // model: deepseek('deepseek-chat'),
      system: systemPrompt,
      messages,
      // maxTokens: 4000,
      temperature: 0.3,
      presencePenalty: 0.3,
      frequencyPenalty: 0.3,

      // stop: ["<figure>", "</figure>"],
    })

    console.log("üîµ API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥...")

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç streamText
    return result.toDataStreamResponse()
  } catch (error) {
    console.error("üî¥ API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error)

    return new Response(JSON.stringify({ error: String(error) }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    })
  }
}
