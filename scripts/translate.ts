import Anthropic from "@anthropic-ai/sdk"
import OpenAI from "openai"
import * as fs from "fs"
import * as path from "path"
import * as dotenv from "dotenv"
import { fileURLToPath } from "url"

interface Language {
  code: string
  name: string
}

interface Model {
  name: string
}

interface Config {
  rootDir: string
  rootTranslateDir: string
  configDir: string
  configTranslateDir: string
  languages: Record<string, Language>
  models: Record<string, Model>
  exclude?: string[]
  allowedExtensions: string[]
}

/**
 * Run "vercal pull" to load environment variables
 * @see https://vercel.com/docs/cli/pull
 */
dotenv.config({ path: [".vercel/.env.development.local", ".env.local"] })

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const configPath = process.argv[2] || "./config.js"
const resolvedConfigPath = path.resolve(configPath)
const { config } = (await import(`file://${resolvedConfigPath}`)) as { config: Config }

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—É—Ç–µ–π
const configDir = path.dirname(resolvedConfigPath)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—É—Ç–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ñ–∏–≥–∞
function resolveFromConfig(relativePath: string) {
  return path.resolve(configDir, relativePath)
}

// –ò–º–ø–æ—Ä—Ç prompt —Ñ—É–Ω–∫—Ü–∏–∏
const promptModulePath = path.resolve(configDir, "translatePrompt.js")
const { getPromptForTranslation } = await import(`file://${promptModulePath}`)

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY })
const xai = new OpenAI({ apiKey: process.env.XAI_API_KEY, baseURL: "https://api.x.ai/v1" })

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
function getNextModel(currentModel: string) {
  const modelEntries = Object.entries(config.models)
  const currentIndex = modelEntries.findIndex(([key]) => key === currentModel)

  if (currentIndex === -1 || currentIndex === modelEntries.length - 1) {
    return null
  }

  return modelEntries[currentIndex + 1][0]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–º–µ–Ω –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
function applyContentReplacements(content: string, langCode: string) {
  let modifiedContent = content

  // –ó–∞–º–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
  modifiedContent = modifiedContent.replace(/export const en =/, `export const ${langCode} =`)

  // –ó–∞–º–µ–Ω–∞ BASE_PATH
  modifiedContent = modifiedContent.replace(/BASE_PATH = ""/, `BASE_PATH = "/${langCode}"`)

  return modifiedContent
}

async function translateWithOpenAI(content: string, targetLang: string, langCode: string) {
  const completion = await openai.chat.completions.create({
    model: config.models.gpt4.name,
    temperature: 0,
    messages: [{ role: "user", content: getPromptForTranslation(content, targetLang, langCode) }],
  })

  const result = completion.choices[0].message.content
  const match = result.match(/<translated_markdown>([\s\S]*)<\/translated_markdown>/)
  return match ? match[1].trim() : result
}

async function translateWithClaude(content: string, targetLang: string, langCode: string) {
  const message = await anthropic.messages.create({
    model: config.models.claude.name,
    max_tokens: 4096,
    temperature: 0,
    messages: [{ role: "user", content: getPromptForTranslation(content, targetLang, langCode) }],
  })

  const contentBlock = message.content[0]
  const result = contentBlock.type === "text" ? contentBlock.text : ""
  const match = result.match(/<translated_markdown>([\s\S]*)<\/translated_markdown>/)
  return match ? match[1].trim() : result
}

async function translateWithGrok(content: string, targetLang: string, langCode: string) {
  const completion = await xai.chat.completions.create({
    model: config.models.grok.name,
    temperature: 0,
    messages: [{ role: "user", content: getPromptForTranslation(content, targetLang, langCode) }],
  })

  const result = completion.choices[0].message.content
  const match = result.match(/<translated_markdown>([\s\S]*)<\/translated_markdown>/)
  return match ? match[1].trim() : result
}

async function translateWithModel(model: string, content: string, targetLang: string, langCode: string) {
  let translatedContent
  switch (model) {
    case "gpt4":
      translatedContent = await translateWithOpenAI(content, targetLang, langCode)
      break
    case "claude":
      translatedContent = await translateWithClaude(content, targetLang, langCode)
      break
    case "grok":
      translatedContent = await translateWithGrok(content, targetLang, langCode)
      break
    default:
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: ${model}`)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
  // if (/\[[^[\]]+(\.\.\.|[?])\]/.test(translatedContent)) {
  //   throw new Error("–ù–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
  // }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
  if (/\[[^<][^[\]]*?(\.\.\.|[?])\]\s*$/.test(translatedContent)) {
    throw new Error("–ù–µ–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
  }

  return translatedContent.trim()
}

async function translateMarkdown(content: string, currentModel: string, targetLang: string, langCode: string) {
  try {
    if (!content.trim()) return content

    const translatedContent = await translateWithModel(currentModel, content, targetLang, langCode)
    return translatedContent
  } catch (error) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
    const nextModel = getNextModel(currentModel)

    if (nextModel) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –º–æ–¥–µ–ª—å—é ${currentModel}: ${error.message}`)
      console.log(`‚Ü™Ô∏è –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å ${nextModel}...`)
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
      return await translateMarkdown(content, nextModel, targetLang, langCode)
    }

    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    console.error(`‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`)
    throw error
  }
}

function splitByH2(content: string) {
  const parts = content.split("\n## ")
  return parts.map((part, i) => (i === 0 ? part.trim() : "## " + part.trim())).filter(Boolean)
}

async function getAllFiles(dir: string) {
  const files = []
  const items = fs.readdirSync(dir)

  for (const item of items) {
    const fullPath = path.join(dir, item)

    if (config.exclude?.some((excluded) => fullPath.includes(excluded))) {
      continue
    }

    const stat = fs.statSync(fullPath)

    if (stat.isDirectory()) {
      files.push(...(await getAllFiles(fullPath)))
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –Ω–µ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
      files.push(fullPath)
    }
  }

  return files
}

/**
 * @param {string} sourceFile
 * @param {string} targetFile
 * @returns {Promise<boolean>}
 */
async function needsTranslation(sourceFile, targetFile) {
  if (!fs.existsSync(targetFile)) {
    return true
  }

  const sourceStats = fs.statSync(sourceFile)
  const targetStats = fs.statSync(targetFile)

  const sourceTime = Math.floor(sourceStats.mtimeMs / 1000)
  const targetTime = Math.floor(targetStats.mtimeMs / 1000)

  return sourceTime > targetTime
}

async function syncFileStructure() {
  console.log("üîç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

  const rootDir = resolveFromConfig(config.rootDir)
  const rootTranslateDir = resolveFromConfig(config.rootTranslateDir)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  if (!fs.existsSync(rootDir)) {
    throw new Error(`–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${rootDir}`)
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const originalFiles = new Set()
  const originalDirs = new Set()

  function processOriginalPath(filePath: string) {
    originalFiles.add(filePath)
    let dir = path.dirname(filePath)
    while (dir !== rootDir) {
      originalDirs.add(dir)
      dir = path.dirname(dir)
    }
  }

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
  const files = await getAllFiles(rootDir)
  files.forEach(processOriginalPath)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫
  for (const [langCode, lang] of Object.entries(config.languages)) {
    const langDir = path.join(rootTranslateDir, lang.code)
    if (!fs.existsSync(langDir)) continue

    console.log(`\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ${lang.name}...`)
    let removedFiles = 0
    let removedDirs = 0
    let removedLogs = 0

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞
    async function checkTranslatedFiles(dir: string) {
      const items = fs.readdirSync(dir)

      for (const item of items) {
        const fullPath = path.join(dir, item)
        const stat = fs.statSync(fullPath)

        if (config.exclude?.some((excluded) => fullPath.includes(excluded))) {
          continue
        }

        if (stat.isDirectory()) {
          await checkTranslatedFiles(fullPath)
        } else {
          if (item.endsWith(".log")) {
            fs.unlinkSync(fullPath)
            removedLogs++
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –ª–æ–≥ —Ñ–∞–π–ª: ${path.relative(langDir, fullPath)}`)
          } else {
            const ext = path.extname(item)
            if (config.allowedExtensions.includes(ext)) {
              const relativePath = path.relative(langDir, fullPath)
              const originalPath = path.join(rootDir, relativePath)

              if (!originalFiles.has(originalPath)) {
                fs.unlinkSync(fullPath)
                removedFiles++
                console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: ${relativePath}`)
              }
            }
          }
        }
      }
    }

    await checkTranslatedFiles(langDir)

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    function removeEmptyDirs(dir: string) {
      const items = fs.readdirSync(dir)

      for (const item of items) {
        const fullPath = path.join(dir, item)
        if (fs.statSync(fullPath).isDirectory()) {
          removeEmptyDirs(fullPath)
          if (fs.readdirSync(fullPath).length === 0) {
            fs.rmdirSync(fullPath)
            removedDirs++
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.relative(langDir, fullPath)}`)
          }
        }
      }
    }

    removeEmptyDirs(langDir)

    if (removedFiles > 0 || removedDirs > 0 || removedLogs > 0) {
      console.log(`‚ú® –û—á–∏—â–µ–Ω–æ ${removedFiles} —Ñ–∞–π–ª–æ–≤, ${removedDirs} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ ${removedLogs} –ª–æ–≥ —Ñ–∞–π–ª–æ–≤`)
    } else {
      console.log(`‚ú® –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞`)
    }
  }
}

async function cleanupTranslations() {
  console.log("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤...")

  const configTranslateDir = resolveFromConfig(config.configTranslateDir)

  if (!fs.existsSync(configTranslateDir)) {
    return
  }

  let totalRemoved = 0
  const removedFiles = []

  const configFiles = fs.readdirSync(configTranslateDir)
  for (const file of configFiles) {
    if (!file.endsWith(".ts")) continue
    const langCode = file.replace(".ts", "")

    if (langCode === "en" || Object.values(config.languages).some((l) => l.code === langCode)) {
      continue
    }

    const configPath = path.join(configTranslateDir, file)
    fs.unlinkSync(configPath)
    totalRemoved++
    removedFiles.push(configPath)
  }

  if (totalRemoved > 0) {
    console.log(`\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${totalRemoved} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤:`)
    removedFiles.forEach((file) => console.log(`  - ${file}`))
    console.log("")
  } else {
    console.log("‚ú® –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")
  }
}

/**
 * @param {string} file
 * @param {string} targetPath
 * @param {Object} lang
 * @param {string} firstModelKey
 * @param {string} rootDir
 */
async function translateFile(file: string, targetPath: string, lang: Language, firstModelKey: string, rootDir: string) {
  const startTime = Date.now()
  const content = fs.readFileSync(file, "utf8")
  let translatedContent = ""

  try {
    const parts = splitByH2(content)

    for (const part of parts) {
      const translatedPart = await translateMarkdown(part, firstModelKey, lang.name, lang.code)
      translatedContent += translatedPart + "\n\n"
    }

    translatedContent = applyContentReplacements(translatedContent, lang.code)

    fs.mkdirSync(path.dirname(targetPath), { recursive: true })
    fs.writeFileSync(targetPath, translatedContent.trim())

    const duration = ((Date.now() - startTime) / 1000).toFixed(1)
    const relativePath = path.relative(rootDir, file)
    console.log(`‚úÖ ${relativePath} ‚Üí ${lang.name} (${duration}s)`)
  } catch (error) {
    const relativePath = path.relative(rootDir, file)
    console.error(`‚ùå ${relativePath} ‚Üí ${lang.name}: ${error.message}`)

    if (translatedContent.trim()) {
      const logPath = targetPath.replace(path.extname(targetPath), ".log")
      fs.writeFileSync(logPath, translatedContent.trim())
    }
  }
}

/**
 * @param {string} sourceFile
 * @param {string} targetPath
 * @param {string} rootDir
 */
async function copyAssetFile(sourceFile: string, targetPath: string, rootDir: string) {
  const startTime = Date.now()

  try {
    fs.mkdirSync(path.dirname(targetPath), { recursive: true })
    fs.copyFileSync(sourceFile, targetPath)

    const duration = ((Date.now() - startTime) / 1000).toFixed(1)
    const relativePath = path.relative(rootDir, sourceFile)
    console.log(`üìÑ ${relativePath} ‚Üí copied (${duration}s)`)
  } catch (error) {
    const relativePath = path.relative(rootDir, sourceFile)
    console.error(`‚ùå ${relativePath} ‚Üí copy failed: ${error.message}`)
  }
}

async function translateFiles() {
  try {
    const firstModelKey = Object.keys(config.models)[0]
    console.log(`üí° –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å –º–æ–¥–µ–ª–∏: ${firstModelKey}`)

    const rootDir = resolveFromConfig(config.rootDir)
    const rootTranslateDir = resolveFromConfig(config.rootTranslateDir)
    const configDirPath = resolveFromConfig(config.configDir)
    const configTranslateDir = resolveFromConfig(config.configTranslateDir)

    console.log(`üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${rootDir}`)
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${rootTranslateDir}`)

    await syncFileStructure()
    await cleanupTranslations()

    // –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –±–µ—Ä–µ–º –∏–∑ configDir
    const sourceConfigPath = path.join(configDirPath, "en.ts")
    console.log(`üìù –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ ${sourceConfigPath}`)

    if (!fs.existsSync(sourceConfigPath)) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: ${sourceConfigPath}`)
    }

    try {
      const sourceConfig = fs.readFileSync(sourceConfigPath, "utf8")

      for (const [langCode, lang] of Object.entries(config.languages)) {
        const targetConfigPath = path.join(configTranslateDir, `${lang.code}.ts`)

        const startTime = Date.now()

        if (!(await needsTranslation(sourceConfigPath, targetConfigPath))) {
          console.log(`‚ú® –ö–æ–Ω—Ñ–∏–≥ ${lang.name} –∞–∫—Ç—É–∞–ª–µ–Ω`)
          continue
        }

        try {
          const translatedConfig = await translateMarkdown(sourceConfig, firstModelKey, lang.name, lang.code)
          const finalConfig = applyContentReplacements(translatedConfig, lang.code)

          const configDirTarget = path.dirname(targetConfigPath)
          if (!fs.existsSync(configDirTarget)) {
            fs.mkdirSync(configDirTarget, { recursive: true })
          }

          fs.writeFileSync(targetConfigPath, finalConfig)

          const duration = ((Date.now() - startTime) / 1000).toFixed(1)
          console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥ ‚Üí ${lang.name} (${duration}s)`)
        } catch (error) {
          console.error(`‚ùå –ö–æ–Ω—Ñ–∏–≥ ‚Üí ${lang.name}: ${error.message}`)
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:`, error.message)
    }

    const files = await getAllFiles(rootDir)
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ ${rootDir}`)

    const translatableTasks = []
    const assetTasks = []

    for (const [langCode, lang] of Object.entries(config.languages)) {
      for (const file of files) {
        const relativePath = path.relative(rootDir, file)
        const targetPath = path.join(rootTranslateDir, lang.code, relativePath)
        const ext = path.extname(file)

        if (config.allowedExtensions.includes(ext)) {
          if (await needsTranslation(file, targetPath)) {
            translatableTasks.push({ file, lang, targetPath })
          }
        } else {
          if (await needsTranslation(file, targetPath)) {
            assetTasks.push({ file, lang, targetPath })
          }
        }
      }
    }

    const totalTasks = translatableTasks.length + assetTasks.length

    if (totalTasks === 0) {
      console.log("‚ú® –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
      return
    }

    console.log(`‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ${totalTasks} —Ñ–∞–π–ª–æ–≤ (${translatableTasks.length} –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, ${assetTasks.length} –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)`)

    for (const task of assetTasks) {
      await copyAssetFile(task.file, task.targetPath, rootDir)
    }

    for (const task of translatableTasks) {
      await translateFile(task.file, task.targetPath, task.lang, firstModelKey, rootDir)
    }

    console.log("\n‚ú® –ì–æ—Ç–æ–≤–æ!")
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞:`, error.message)
  }
}

translateFiles()
